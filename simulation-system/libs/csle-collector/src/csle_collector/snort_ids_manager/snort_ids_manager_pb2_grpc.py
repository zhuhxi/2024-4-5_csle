# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import csle_collector.snort_ids_manager.snort_ids_manager_pb2 as snort__ids__manager__pb2


class SnortIdsManagerStub(object):
    """Interface exported by the server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getSnortIdsAlerts = channel.unary_unary(
                '/SnortIdsManager/getSnortIdsAlerts',
                request_serializer=snort__ids__manager__pb2.GetSnortIdsAlertsMsg.SerializeToString,
                response_deserializer=snort__ids__manager__pb2.SnortIdsLogDTO.FromString,
                )
        self.stopSnortIdsMonitor = channel.unary_unary(
                '/SnortIdsManager/stopSnortIdsMonitor',
                request_serializer=snort__ids__manager__pb2.StopSnortIdsMonitorMsg.SerializeToString,
                response_deserializer=snort__ids__manager__pb2.SnortIdsMonitorDTO.FromString,
                )
        self.startSnortIdsMonitor = channel.unary_unary(
                '/SnortIdsManager/startSnortIdsMonitor',
                request_serializer=snort__ids__manager__pb2.StartSnortIdsMonitorMsg.SerializeToString,
                response_deserializer=snort__ids__manager__pb2.SnortIdsMonitorDTO.FromString,
                )
        self.getSnortIdsMonitorStatus = channel.unary_unary(
                '/SnortIdsManager/getSnortIdsMonitorStatus',
                request_serializer=snort__ids__manager__pb2.GetSnortIdsMonitorStatusMsg.SerializeToString,
                response_deserializer=snort__ids__manager__pb2.SnortIdsMonitorDTO.FromString,
                )
        self.stopSnortIds = channel.unary_unary(
                '/SnortIdsManager/stopSnortIds',
                request_serializer=snort__ids__manager__pb2.StopSnortIdsMsg.SerializeToString,
                response_deserializer=snort__ids__manager__pb2.SnortIdsMonitorDTO.FromString,
                )
        self.startSnortIds = channel.unary_unary(
                '/SnortIdsManager/startSnortIds',
                request_serializer=snort__ids__manager__pb2.StartSnortIdsMsg.SerializeToString,
                response_deserializer=snort__ids__manager__pb2.SnortIdsMonitorDTO.FromString,
                )


class SnortIdsManagerServicer(object):
    """Interface exported by the server
    """

    def getSnortIdsAlerts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopSnortIdsMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSnortIdsMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSnortIdsMonitorStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopSnortIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSnortIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SnortIdsManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getSnortIdsAlerts': grpc.unary_unary_rpc_method_handler(
                    servicer.getSnortIdsAlerts,
                    request_deserializer=snort__ids__manager__pb2.GetSnortIdsAlertsMsg.FromString,
                    response_serializer=snort__ids__manager__pb2.SnortIdsLogDTO.SerializeToString,
            ),
            'stopSnortIdsMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.stopSnortIdsMonitor,
                    request_deserializer=snort__ids__manager__pb2.StopSnortIdsMonitorMsg.FromString,
                    response_serializer=snort__ids__manager__pb2.SnortIdsMonitorDTO.SerializeToString,
            ),
            'startSnortIdsMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.startSnortIdsMonitor,
                    request_deserializer=snort__ids__manager__pb2.StartSnortIdsMonitorMsg.FromString,
                    response_serializer=snort__ids__manager__pb2.SnortIdsMonitorDTO.SerializeToString,
            ),
            'getSnortIdsMonitorStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getSnortIdsMonitorStatus,
                    request_deserializer=snort__ids__manager__pb2.GetSnortIdsMonitorStatusMsg.FromString,
                    response_serializer=snort__ids__manager__pb2.SnortIdsMonitorDTO.SerializeToString,
            ),
            'stopSnortIds': grpc.unary_unary_rpc_method_handler(
                    servicer.stopSnortIds,
                    request_deserializer=snort__ids__manager__pb2.StopSnortIdsMsg.FromString,
                    response_serializer=snort__ids__manager__pb2.SnortIdsMonitorDTO.SerializeToString,
            ),
            'startSnortIds': grpc.unary_unary_rpc_method_handler(
                    servicer.startSnortIds,
                    request_deserializer=snort__ids__manager__pb2.StartSnortIdsMsg.FromString,
                    response_serializer=snort__ids__manager__pb2.SnortIdsMonitorDTO.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SnortIdsManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SnortIdsManager(object):
    """Interface exported by the server
    """

    @staticmethod
    def getSnortIdsAlerts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SnortIdsManager/getSnortIdsAlerts',
            snort__ids__manager__pb2.GetSnortIdsAlertsMsg.SerializeToString,
            snort__ids__manager__pb2.SnortIdsLogDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopSnortIdsMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SnortIdsManager/stopSnortIdsMonitor',
            snort__ids__manager__pb2.StopSnortIdsMonitorMsg.SerializeToString,
            snort__ids__manager__pb2.SnortIdsMonitorDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSnortIdsMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SnortIdsManager/startSnortIdsMonitor',
            snort__ids__manager__pb2.StartSnortIdsMonitorMsg.SerializeToString,
            snort__ids__manager__pb2.SnortIdsMonitorDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSnortIdsMonitorStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SnortIdsManager/getSnortIdsMonitorStatus',
            snort__ids__manager__pb2.GetSnortIdsMonitorStatusMsg.SerializeToString,
            snort__ids__manager__pb2.SnortIdsMonitorDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopSnortIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SnortIdsManager/stopSnortIds',
            snort__ids__manager__pb2.StopSnortIdsMsg.SerializeToString,
            snort__ids__manager__pb2.SnortIdsMonitorDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSnortIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SnortIdsManager/startSnortIds',
            snort__ids__manager__pb2.StartSnortIdsMsg.SerializeToString,
            snort__ids__manager__pb2.SnortIdsMonitorDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
