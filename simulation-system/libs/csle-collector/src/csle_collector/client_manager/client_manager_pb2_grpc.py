# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import csle_collector.client_manager.client_manager_pb2 as client__manager__pb2


class ClientManagerStub(object):
    """Interface exported by the server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getClients = channel.unary_unary(
                '/ClientManager/getClients',
                request_serializer=client__manager__pb2.GetClientsMsg.SerializeToString,
                response_deserializer=client__manager__pb2.ClientsDTO.FromString,
                )
        self.stopClients = channel.unary_unary(
                '/ClientManager/stopClients',
                request_serializer=client__manager__pb2.StopClientsMsg.SerializeToString,
                response_deserializer=client__manager__pb2.ClientsDTO.FromString,
                )
        self.startClients = channel.unary_unary(
                '/ClientManager/startClients',
                request_serializer=client__manager__pb2.StartClientsMsg.SerializeToString,
                response_deserializer=client__manager__pb2.ClientsDTO.FromString,
                )
        self.startProducer = channel.unary_unary(
                '/ClientManager/startProducer',
                request_serializer=client__manager__pb2.StartProducerMsg.SerializeToString,
                response_deserializer=client__manager__pb2.ClientsDTO.FromString,
                )
        self.stopProducer = channel.unary_unary(
                '/ClientManager/stopProducer',
                request_serializer=client__manager__pb2.StopProducerMsg.SerializeToString,
                response_deserializer=client__manager__pb2.ClientsDTO.FromString,
                )


class ClientManagerServicer(object):
    """Interface exported by the server
    """

    def getClients(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopClients(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startClients(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startProducer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopProducer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getClients': grpc.unary_unary_rpc_method_handler(
                    servicer.getClients,
                    request_deserializer=client__manager__pb2.GetClientsMsg.FromString,
                    response_serializer=client__manager__pb2.ClientsDTO.SerializeToString,
            ),
            'stopClients': grpc.unary_unary_rpc_method_handler(
                    servicer.stopClients,
                    request_deserializer=client__manager__pb2.StopClientsMsg.FromString,
                    response_serializer=client__manager__pb2.ClientsDTO.SerializeToString,
            ),
            'startClients': grpc.unary_unary_rpc_method_handler(
                    servicer.startClients,
                    request_deserializer=client__manager__pb2.StartClientsMsg.FromString,
                    response_serializer=client__manager__pb2.ClientsDTO.SerializeToString,
            ),
            'startProducer': grpc.unary_unary_rpc_method_handler(
                    servicer.startProducer,
                    request_deserializer=client__manager__pb2.StartProducerMsg.FromString,
                    response_serializer=client__manager__pb2.ClientsDTO.SerializeToString,
            ),
            'stopProducer': grpc.unary_unary_rpc_method_handler(
                    servicer.stopProducer,
                    request_deserializer=client__manager__pb2.StopProducerMsg.FromString,
                    response_serializer=client__manager__pb2.ClientsDTO.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ClientManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClientManager(object):
    """Interface exported by the server
    """

    @staticmethod
    def getClients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClientManager/getClients',
            client__manager__pb2.GetClientsMsg.SerializeToString,
            client__manager__pb2.ClientsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopClients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClientManager/stopClients',
            client__manager__pb2.StopClientsMsg.SerializeToString,
            client__manager__pb2.ClientsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startClients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClientManager/startClients',
            client__manager__pb2.StartClientsMsg.SerializeToString,
            client__manager__pb2.ClientsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startProducer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClientManager/startProducer',
            client__manager__pb2.StartProducerMsg.SerializeToString,
            client__manager__pb2.ClientsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopProducer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClientManager/stopProducer',
            client__manager__pb2.StopProducerMsg.SerializeToString,
            client__manager__pb2.ClientsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
