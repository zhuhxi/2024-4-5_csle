# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import csle_collector.ossec_ids_manager.ossec_ids_manager_pb2 as ossec__ids__manager__pb2


class OSSECIdsManagerStub(object):
    """Interface exported by the server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getOSSECIdsAlerts = channel.unary_unary(
                '/OSSECIdsManager/getOSSECIdsAlerts',
                request_serializer=ossec__ids__manager__pb2.GetOSSECIdsAlertsMsg.SerializeToString,
                response_deserializer=ossec__ids__manager__pb2.OSSECIdsLogDTO.FromString,
                )
        self.stopOSSECIdsMonitor = channel.unary_unary(
                '/OSSECIdsManager/stopOSSECIdsMonitor',
                request_serializer=ossec__ids__manager__pb2.StopOSSECIdsMonitorMsg.SerializeToString,
                response_deserializer=ossec__ids__manager__pb2.OSSECIdsMonitorDTO.FromString,
                )
        self.startOSSECIdsMonitor = channel.unary_unary(
                '/OSSECIdsManager/startOSSECIdsMonitor',
                request_serializer=ossec__ids__manager__pb2.StartOSSECIdsMonitorMsg.SerializeToString,
                response_deserializer=ossec__ids__manager__pb2.OSSECIdsMonitorDTO.FromString,
                )
        self.stopOSSECIds = channel.unary_unary(
                '/OSSECIdsManager/stopOSSECIds',
                request_serializer=ossec__ids__manager__pb2.StopOSSECIdsMsg.SerializeToString,
                response_deserializer=ossec__ids__manager__pb2.OSSECIdsMonitorDTO.FromString,
                )
        self.startOSSECIds = channel.unary_unary(
                '/OSSECIdsManager/startOSSECIds',
                request_serializer=ossec__ids__manager__pb2.StartOSSECIdsMsg.SerializeToString,
                response_deserializer=ossec__ids__manager__pb2.OSSECIdsMonitorDTO.FromString,
                )
        self.getOSSECIdsMonitorStatus = channel.unary_unary(
                '/OSSECIdsManager/getOSSECIdsMonitorStatus',
                request_serializer=ossec__ids__manager__pb2.GetOSSECIdsMonitorStatusMsg.SerializeToString,
                response_deserializer=ossec__ids__manager__pb2.OSSECIdsMonitorDTO.FromString,
                )


class OSSECIdsManagerServicer(object):
    """Interface exported by the server
    """

    def getOSSECIdsAlerts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopOSSECIdsMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startOSSECIdsMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopOSSECIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startOSSECIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getOSSECIdsMonitorStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OSSECIdsManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getOSSECIdsAlerts': grpc.unary_unary_rpc_method_handler(
                    servicer.getOSSECIdsAlerts,
                    request_deserializer=ossec__ids__manager__pb2.GetOSSECIdsAlertsMsg.FromString,
                    response_serializer=ossec__ids__manager__pb2.OSSECIdsLogDTO.SerializeToString,
            ),
            'stopOSSECIdsMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.stopOSSECIdsMonitor,
                    request_deserializer=ossec__ids__manager__pb2.StopOSSECIdsMonitorMsg.FromString,
                    response_serializer=ossec__ids__manager__pb2.OSSECIdsMonitorDTO.SerializeToString,
            ),
            'startOSSECIdsMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.startOSSECIdsMonitor,
                    request_deserializer=ossec__ids__manager__pb2.StartOSSECIdsMonitorMsg.FromString,
                    response_serializer=ossec__ids__manager__pb2.OSSECIdsMonitorDTO.SerializeToString,
            ),
            'stopOSSECIds': grpc.unary_unary_rpc_method_handler(
                    servicer.stopOSSECIds,
                    request_deserializer=ossec__ids__manager__pb2.StopOSSECIdsMsg.FromString,
                    response_serializer=ossec__ids__manager__pb2.OSSECIdsMonitorDTO.SerializeToString,
            ),
            'startOSSECIds': grpc.unary_unary_rpc_method_handler(
                    servicer.startOSSECIds,
                    request_deserializer=ossec__ids__manager__pb2.StartOSSECIdsMsg.FromString,
                    response_serializer=ossec__ids__manager__pb2.OSSECIdsMonitorDTO.SerializeToString,
            ),
            'getOSSECIdsMonitorStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getOSSECIdsMonitorStatus,
                    request_deserializer=ossec__ids__manager__pb2.GetOSSECIdsMonitorStatusMsg.FromString,
                    response_serializer=ossec__ids__manager__pb2.OSSECIdsMonitorDTO.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'OSSECIdsManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OSSECIdsManager(object):
    """Interface exported by the server
    """

    @staticmethod
    def getOSSECIdsAlerts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OSSECIdsManager/getOSSECIdsAlerts',
            ossec__ids__manager__pb2.GetOSSECIdsAlertsMsg.SerializeToString,
            ossec__ids__manager__pb2.OSSECIdsLogDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopOSSECIdsMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OSSECIdsManager/stopOSSECIdsMonitor',
            ossec__ids__manager__pb2.StopOSSECIdsMonitorMsg.SerializeToString,
            ossec__ids__manager__pb2.OSSECIdsMonitorDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startOSSECIdsMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OSSECIdsManager/startOSSECIdsMonitor',
            ossec__ids__manager__pb2.StartOSSECIdsMonitorMsg.SerializeToString,
            ossec__ids__manager__pb2.OSSECIdsMonitorDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopOSSECIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OSSECIdsManager/stopOSSECIds',
            ossec__ids__manager__pb2.StopOSSECIdsMsg.SerializeToString,
            ossec__ids__manager__pb2.OSSECIdsMonitorDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startOSSECIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OSSECIdsManager/startOSSECIds',
            ossec__ids__manager__pb2.StartOSSECIdsMsg.SerializeToString,
            ossec__ids__manager__pb2.OSSECIdsMonitorDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getOSSECIdsMonitorStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OSSECIdsManager/getOSSECIdsMonitorStatus',
            ossec__ids__manager__pb2.GetOSSECIdsMonitorStatusMsg.SerializeToString,
            ossec__ids__manager__pb2.OSSECIdsMonitorDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
