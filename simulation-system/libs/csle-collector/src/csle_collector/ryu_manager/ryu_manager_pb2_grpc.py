# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import csle_collector.ryu_manager.ryu_manager_pb2 as ryu__manager__pb2

class RyuManagerStub(object):
    """Interface exported by the server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getRyuStatus = channel.unary_unary(
                '/RyuManager/getRyuStatus',
                request_serializer=ryu__manager__pb2.GetRyuStatusMsg.SerializeToString,
                response_deserializer=ryu__manager__pb2.RyuDTO.FromString,
                )
        self.stopRyu = channel.unary_unary(
                '/RyuManager/stopRyu',
                request_serializer=ryu__manager__pb2.StopRyuMsg.SerializeToString,
                response_deserializer=ryu__manager__pb2.RyuDTO.FromString,
                )
        self.startRyu = channel.unary_unary(
                '/RyuManager/startRyu',
                request_serializer=ryu__manager__pb2.StartRyuMsg.SerializeToString,
                response_deserializer=ryu__manager__pb2.RyuDTO.FromString,
                )
        self.stopRyuMonitor = channel.unary_unary(
                '/RyuManager/stopRyuMonitor',
                request_serializer=ryu__manager__pb2.StopRyuMonitorMsg.SerializeToString,
                response_deserializer=ryu__manager__pb2.RyuDTO.FromString,
                )
        self.startRyuMonitor = channel.unary_unary(
                '/RyuManager/startRyuMonitor',
                request_serializer=ryu__manager__pb2.StartRyuMonitorMsg.SerializeToString,
                response_deserializer=ryu__manager__pb2.RyuDTO.FromString,
                )


class RyuManagerServicer(object):
    """Interface exported by the server
    """

    def getRyuStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopRyu(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startRyu(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopRyuMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startRyuMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RyuManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getRyuStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getRyuStatus,
                    request_deserializer=ryu__manager__pb2.GetRyuStatusMsg.FromString,
                    response_serializer=ryu__manager__pb2.RyuDTO.SerializeToString,
            ),
            'stopRyu': grpc.unary_unary_rpc_method_handler(
                    servicer.stopRyu,
                    request_deserializer=ryu__manager__pb2.StopRyuMsg.FromString,
                    response_serializer=ryu__manager__pb2.RyuDTO.SerializeToString,
            ),
            'startRyu': grpc.unary_unary_rpc_method_handler(
                    servicer.startRyu,
                    request_deserializer=ryu__manager__pb2.StartRyuMsg.FromString,
                    response_serializer=ryu__manager__pb2.RyuDTO.SerializeToString,
            ),
            'stopRyuMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.stopRyuMonitor,
                    request_deserializer=ryu__manager__pb2.StopRyuMonitorMsg.FromString,
                    response_serializer=ryu__manager__pb2.RyuDTO.SerializeToString,
            ),
            'startRyuMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.startRyuMonitor,
                    request_deserializer=ryu__manager__pb2.StartRyuMonitorMsg.FromString,
                    response_serializer=ryu__manager__pb2.RyuDTO.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RyuManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RyuManager(object):
    """Interface exported by the server
    """

    @staticmethod
    def getRyuStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RyuManager/getRyuStatus',
            ryu__manager__pb2.GetRyuStatusMsg.SerializeToString,
            ryu__manager__pb2.RyuDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopRyu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RyuManager/stopRyu',
            ryu__manager__pb2.StopRyuMsg.SerializeToString,
            ryu__manager__pb2.RyuDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startRyu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RyuManager/startRyu',
            ryu__manager__pb2.StartRyuMsg.SerializeToString,
            ryu__manager__pb2.RyuDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopRyuMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RyuManager/stopRyuMonitor',
            ryu__manager__pb2.StopRyuMonitorMsg.SerializeToString,
            ryu__manager__pb2.RyuDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startRyuMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RyuManager/startRyuMonitor',
            ryu__manager__pb2.StartRyuMonitorMsg.SerializeToString,
            ryu__manager__pb2.RyuDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
