# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import csle_collector.host_manager.host_manager_pb2 as host__manager__pb2


class HostManagerStub(object):
    """Interface exported by the server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.stopHostMonitor = channel.unary_unary(
                '/HostManager/stopHostMonitor',
                request_serializer=host__manager__pb2.StopHostMonitorMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostStatusDTO.FromString,
                )
        self.startHostMonitor = channel.unary_unary(
                '/HostManager/startHostMonitor',
                request_serializer=host__manager__pb2.StartHostMonitorMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostStatusDTO.FromString,
                )
        self.getHostStatus = channel.unary_unary(
                '/HostManager/getHostStatus',
                request_serializer=host__manager__pb2.GetHostStatusMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostStatusDTO.FromString,
                )
        self.getHostMetrics = channel.unary_unary(
                '/HostManager/getHostMetrics',
                request_serializer=host__manager__pb2.GetHostMetricsMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostMetricsDTO.FromString,
                )
        self.stopFilebeat = channel.unary_unary(
                '/HostManager/stopFilebeat',
                request_serializer=host__manager__pb2.StopFilebeatMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostStatusDTO.FromString,
                )
        self.startFilebeat = channel.unary_unary(
                '/HostManager/startFilebeat',
                request_serializer=host__manager__pb2.StartFilebeatMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostStatusDTO.FromString,
                )
        self.configFilebeat = channel.unary_unary(
                '/HostManager/configFilebeat',
                request_serializer=host__manager__pb2.ConfigFilebeatMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostStatusDTO.FromString,
                )
        self.stopPacketbeat = channel.unary_unary(
                '/HostManager/stopPacketbeat',
                request_serializer=host__manager__pb2.StopPacketbeatMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostStatusDTO.FromString,
                )
        self.startPacketbeat = channel.unary_unary(
                '/HostManager/startPacketbeat',
                request_serializer=host__manager__pb2.StartPacketbeatMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostStatusDTO.FromString,
                )
        self.configPacketbeat = channel.unary_unary(
                '/HostManager/configPacketbeat',
                request_serializer=host__manager__pb2.ConfigPacketbeatMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostStatusDTO.FromString,
                )
        self.stopMetricbeat = channel.unary_unary(
                '/HostManager/stopMetricbeat',
                request_serializer=host__manager__pb2.StopMetricbeatMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostStatusDTO.FromString,
                )
        self.startMetricbeat = channel.unary_unary(
                '/HostManager/startMetricbeat',
                request_serializer=host__manager__pb2.StartMetricbeatMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostStatusDTO.FromString,
                )
        self.configMetricbeat = channel.unary_unary(
                '/HostManager/configMetricbeat',
                request_serializer=host__manager__pb2.ConfigMetricbeatMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostStatusDTO.FromString,
                )
        self.stopHeartbeat = channel.unary_unary(
                '/HostManager/stopHeartbeat',
                request_serializer=host__manager__pb2.StopHeartbeatMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostStatusDTO.FromString,
                )
        self.startHeartbeat = channel.unary_unary(
                '/HostManager/startHeartbeat',
                request_serializer=host__manager__pb2.StartHeartbeatMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostStatusDTO.FromString,
                )
        self.configHeartbeat = channel.unary_unary(
                '/HostManager/configHeartbeat',
                request_serializer=host__manager__pb2.ConfigHeartbeatMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostStatusDTO.FromString,
                )
        self.stopSpark = channel.unary_unary(
                '/HostManager/stopSpark',
                request_serializer=host__manager__pb2.StopSparkMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostStatusDTO.FromString,
                )
        self.startSpark = channel.unary_unary(
                '/HostManager/startSpark',
                request_serializer=host__manager__pb2.StartSparkMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostStatusDTO.FromString,
                )


class HostManagerServicer(object):
    """Interface exported by the server
    """

    def stopHostMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startHostMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getHostStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getHostMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopFilebeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startFilebeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def configFilebeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopPacketbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startPacketbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def configPacketbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopMetricbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startMetricbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def configMetricbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def configHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopSpark(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSpark(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HostManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'stopHostMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.stopHostMonitor,
                    request_deserializer=host__manager__pb2.StopHostMonitorMsg.FromString,
                    response_serializer=host__manager__pb2.HostStatusDTO.SerializeToString,
            ),
            'startHostMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.startHostMonitor,
                    request_deserializer=host__manager__pb2.StartHostMonitorMsg.FromString,
                    response_serializer=host__manager__pb2.HostStatusDTO.SerializeToString,
            ),
            'getHostStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getHostStatus,
                    request_deserializer=host__manager__pb2.GetHostStatusMsg.FromString,
                    response_serializer=host__manager__pb2.HostStatusDTO.SerializeToString,
            ),
            'getHostMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.getHostMetrics,
                    request_deserializer=host__manager__pb2.GetHostMetricsMsg.FromString,
                    response_serializer=host__manager__pb2.HostMetricsDTO.SerializeToString,
            ),
            'stopFilebeat': grpc.unary_unary_rpc_method_handler(
                    servicer.stopFilebeat,
                    request_deserializer=host__manager__pb2.StopFilebeatMsg.FromString,
                    response_serializer=host__manager__pb2.HostStatusDTO.SerializeToString,
            ),
            'startFilebeat': grpc.unary_unary_rpc_method_handler(
                    servicer.startFilebeat,
                    request_deserializer=host__manager__pb2.StartFilebeatMsg.FromString,
                    response_serializer=host__manager__pb2.HostStatusDTO.SerializeToString,
            ),
            'configFilebeat': grpc.unary_unary_rpc_method_handler(
                    servicer.configFilebeat,
                    request_deserializer=host__manager__pb2.ConfigFilebeatMsg.FromString,
                    response_serializer=host__manager__pb2.HostStatusDTO.SerializeToString,
            ),
            'stopPacketbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.stopPacketbeat,
                    request_deserializer=host__manager__pb2.StopPacketbeatMsg.FromString,
                    response_serializer=host__manager__pb2.HostStatusDTO.SerializeToString,
            ),
            'startPacketbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.startPacketbeat,
                    request_deserializer=host__manager__pb2.StartPacketbeatMsg.FromString,
                    response_serializer=host__manager__pb2.HostStatusDTO.SerializeToString,
            ),
            'configPacketbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.configPacketbeat,
                    request_deserializer=host__manager__pb2.ConfigPacketbeatMsg.FromString,
                    response_serializer=host__manager__pb2.HostStatusDTO.SerializeToString,
            ),
            'stopMetricbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.stopMetricbeat,
                    request_deserializer=host__manager__pb2.StopMetricbeatMsg.FromString,
                    response_serializer=host__manager__pb2.HostStatusDTO.SerializeToString,
            ),
            'startMetricbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.startMetricbeat,
                    request_deserializer=host__manager__pb2.StartMetricbeatMsg.FromString,
                    response_serializer=host__manager__pb2.HostStatusDTO.SerializeToString,
            ),
            'configMetricbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.configMetricbeat,
                    request_deserializer=host__manager__pb2.ConfigMetricbeatMsg.FromString,
                    response_serializer=host__manager__pb2.HostStatusDTO.SerializeToString,
            ),
            'stopHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.stopHeartbeat,
                    request_deserializer=host__manager__pb2.StopHeartbeatMsg.FromString,
                    response_serializer=host__manager__pb2.HostStatusDTO.SerializeToString,
            ),
            'startHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.startHeartbeat,
                    request_deserializer=host__manager__pb2.StartHeartbeatMsg.FromString,
                    response_serializer=host__manager__pb2.HostStatusDTO.SerializeToString,
            ),
            'configHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.configHeartbeat,
                    request_deserializer=host__manager__pb2.ConfigHeartbeatMsg.FromString,
                    response_serializer=host__manager__pb2.HostStatusDTO.SerializeToString,
            ),
            'stopSpark': grpc.unary_unary_rpc_method_handler(
                    servicer.stopSpark,
                    request_deserializer=host__manager__pb2.StopSparkMsg.FromString,
                    response_serializer=host__manager__pb2.HostStatusDTO.SerializeToString,
            ),
            'startSpark': grpc.unary_unary_rpc_method_handler(
                    servicer.startSpark,
                    request_deserializer=host__manager__pb2.StartSparkMsg.FromString,
                    response_serializer=host__manager__pb2.HostStatusDTO.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'HostManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HostManager(object):
    """Interface exported by the server
    """

    @staticmethod
    def stopHostMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/stopHostMonitor',
            host__manager__pb2.StopHostMonitorMsg.SerializeToString,
            host__manager__pb2.HostStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startHostMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/startHostMonitor',
            host__manager__pb2.StartHostMonitorMsg.SerializeToString,
            host__manager__pb2.HostStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getHostStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/getHostStatus',
            host__manager__pb2.GetHostStatusMsg.SerializeToString,
            host__manager__pb2.HostStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getHostMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/getHostMetrics',
            host__manager__pb2.GetHostMetricsMsg.SerializeToString,
            host__manager__pb2.HostMetricsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopFilebeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/stopFilebeat',
            host__manager__pb2.StopFilebeatMsg.SerializeToString,
            host__manager__pb2.HostStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startFilebeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/startFilebeat',
            host__manager__pb2.StartFilebeatMsg.SerializeToString,
            host__manager__pb2.HostStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def configFilebeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/configFilebeat',
            host__manager__pb2.ConfigFilebeatMsg.SerializeToString,
            host__manager__pb2.HostStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopPacketbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/stopPacketbeat',
            host__manager__pb2.StopPacketbeatMsg.SerializeToString,
            host__manager__pb2.HostStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startPacketbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/startPacketbeat',
            host__manager__pb2.StartPacketbeatMsg.SerializeToString,
            host__manager__pb2.HostStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def configPacketbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/configPacketbeat',
            host__manager__pb2.ConfigPacketbeatMsg.SerializeToString,
            host__manager__pb2.HostStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopMetricbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/stopMetricbeat',
            host__manager__pb2.StopMetricbeatMsg.SerializeToString,
            host__manager__pb2.HostStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startMetricbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/startMetricbeat',
            host__manager__pb2.StartMetricbeatMsg.SerializeToString,
            host__manager__pb2.HostStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def configMetricbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/configMetricbeat',
            host__manager__pb2.ConfigMetricbeatMsg.SerializeToString,
            host__manager__pb2.HostStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/stopHeartbeat',
            host__manager__pb2.StopHeartbeatMsg.SerializeToString,
            host__manager__pb2.HostStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/startHeartbeat',
            host__manager__pb2.StartHeartbeatMsg.SerializeToString,
            host__manager__pb2.HostStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def configHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/configHeartbeat',
            host__manager__pb2.ConfigHeartbeatMsg.SerializeToString,
            host__manager__pb2.HostStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopSpark(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/stopSpark',
            host__manager__pb2.StopSparkMsg.SerializeToString,
            host__manager__pb2.HostStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSpark(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/startSpark',
            host__manager__pb2.StartSparkMsg.SerializeToString,
            host__manager__pb2.HostStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
