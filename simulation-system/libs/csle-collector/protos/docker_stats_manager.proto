syntax = "proto3";

// Interface exported by the server
service DockerStatsManager {
  rpc getDockerStatsMonitorStatus(GetDockerStatsMonitorStatusMsg) returns (DockerStatsMonitorDTO) {}
  rpc stopDockerStatsMonitor(StopDockerStatsMonitorMsg) returns (DockerStatsMonitorDTO) {}
  rpc startDockerStatsMonitor(StartDockerStatsMonitorMsg) returns (DockerStatsMonitorDTO) {}
}

// Message that the client sends to stop the docker stats monitor
message StopDockerStatsMonitorMsg {
  string emulation = 1;
  int32 execution_first_ip_octet = 2;
}

//DTO representing a pair of ip and container name
message ContainerIp {
  string ip = 1;
  string container = 2;
}

// Message that the client sends to start the docker stats monitor
message StartDockerStatsMonitorMsg {
  string emulation = 1;
  int32 execution_first_ip_octet = 2;
  string kafka_ip = 3;
  int32 stats_queue_maxsize = 4;
  int32 time_step_len_seconds = 5;
  int32 kafka_port = 6;
  repeated ContainerIp containers = 7;
}

// Message that the client sends to extract the status of the docker stats monitor
message GetDockerStatsMonitorStatusMsg {}

// Message that the server returns when requested by the client, contains info about the docker stats monitor
message DockerStatsMonitorDTO {
  int32 num_monitors = 1;
  repeated string emulations = 2;
  repeated int32 emulation_executions = 3;
}
