# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import csle_cluster.cluster_manager.cluster_manager_pb2 as cluster__manager__pb2


class ClusterManagerStub(object):
    """Interface exported by the server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getNodeStatus = channel.unary_unary(
                '/ClusterManager/getNodeStatus',
                request_serializer=cluster__manager__pb2.GetNodeStatusMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.NodeStatusDTO.FromString,
                )
        self.startPostgreSQL = channel.unary_unary(
                '/ClusterManager/startPostgreSQL',
                request_serializer=cluster__manager__pb2.StartPostgreSQLMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startCAdvisor = channel.unary_unary(
                '/ClusterManager/startCAdvisor',
                request_serializer=cluster__manager__pb2.StartCAdvisorMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startNodeExporter = channel.unary_unary(
                '/ClusterManager/startNodeExporter',
                request_serializer=cluster__manager__pb2.StartNodeExporterMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startGrafana = channel.unary_unary(
                '/ClusterManager/startGrafana',
                request_serializer=cluster__manager__pb2.StartGrafanaMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startPrometheus = channel.unary_unary(
                '/ClusterManager/startPrometheus',
                request_serializer=cluster__manager__pb2.StartPrometheusMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startPgAdmin = channel.unary_unary(
                '/ClusterManager/startPgAdmin',
                request_serializer=cluster__manager__pb2.StartPgAdminMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startNginx = channel.unary_unary(
                '/ClusterManager/startNginx',
                request_serializer=cluster__manager__pb2.StartNginxMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startFlask = channel.unary_unary(
                '/ClusterManager/startFlask',
                request_serializer=cluster__manager__pb2.StartFlaskMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startDockerStatsManager = channel.unary_unary(
                '/ClusterManager/startDockerStatsManager',
                request_serializer=cluster__manager__pb2.StartDockerStatsManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startDockerStatsManagerThread = channel.unary_unary(
                '/ClusterManager/startDockerStatsManagerThread',
                request_serializer=cluster__manager__pb2.StartDockerStatsManagerThreadMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startDockerEngine = channel.unary_unary(
                '/ClusterManager/startDockerEngine',
                request_serializer=cluster__manager__pb2.StartDockerEngineMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopPostgreSQL = channel.unary_unary(
                '/ClusterManager/stopPostgreSQL',
                request_serializer=cluster__manager__pb2.StopPostgreSQLMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopCAdvisor = channel.unary_unary(
                '/ClusterManager/stopCAdvisor',
                request_serializer=cluster__manager__pb2.StopCAdvisorMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopNodeExporter = channel.unary_unary(
                '/ClusterManager/stopNodeExporter',
                request_serializer=cluster__manager__pb2.StopNodeExporterMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopGrafana = channel.unary_unary(
                '/ClusterManager/stopGrafana',
                request_serializer=cluster__manager__pb2.StopGrafanaMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopPrometheus = channel.unary_unary(
                '/ClusterManager/stopPrometheus',
                request_serializer=cluster__manager__pb2.StopPrometheusMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopPgAdmin = channel.unary_unary(
                '/ClusterManager/stopPgAdmin',
                request_serializer=cluster__manager__pb2.StopPgAdminMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopNginx = channel.unary_unary(
                '/ClusterManager/stopNginx',
                request_serializer=cluster__manager__pb2.StopNginxMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopFlask = channel.unary_unary(
                '/ClusterManager/stopFlask',
                request_serializer=cluster__manager__pb2.StopFlaskMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopDockerStatsManager = channel.unary_unary(
                '/ClusterManager/stopDockerStatsManager',
                request_serializer=cluster__manager__pb2.StopDockerStatsManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopDockerEngine = channel.unary_unary(
                '/ClusterManager/stopDockerEngine',
                request_serializer=cluster__manager__pb2.StopDockerEngineMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.getCsleLogFiles = channel.unary_unary(
                '/ClusterManager/getCsleLogFiles',
                request_serializer=cluster__manager__pb2.GetCsleLogFilesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getDockerStatsManagerLogs = channel.unary_unary(
                '/ClusterManager/getDockerStatsManagerLogs',
                request_serializer=cluster__manager__pb2.GetDockerStatsManagerLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getPrometheusLogs = channel.unary_unary(
                '/ClusterManager/getPrometheusLogs',
                request_serializer=cluster__manager__pb2.GetPrometheusLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getNodeExporterLogs = channel.unary_unary(
                '/ClusterManager/getNodeExporterLogs',
                request_serializer=cluster__manager__pb2.GetNodeExporterLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getCadvisorLogs = channel.unary_unary(
                '/ClusterManager/getCadvisorLogs',
                request_serializer=cluster__manager__pb2.GetCAdvisorLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getPgAdminLogs = channel.unary_unary(
                '/ClusterManager/getPgAdminLogs',
                request_serializer=cluster__manager__pb2.GetPgAdminLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getGrafanaLogs = channel.unary_unary(
                '/ClusterManager/getGrafanaLogs',
                request_serializer=cluster__manager__pb2.GetGrafanaLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getNginxLogs = channel.unary_unary(
                '/ClusterManager/getNginxLogs',
                request_serializer=cluster__manager__pb2.GetNginxLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getDockerLogs = channel.unary_unary(
                '/ClusterManager/getDockerLogs',
                request_serializer=cluster__manager__pb2.GetDockerLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getPostrgreSQLLogs = channel.unary_unary(
                '/ClusterManager/getPostrgreSQLLogs',
                request_serializer=cluster__manager__pb2.GetPostgreSQLLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getFlaskLogs = channel.unary_unary(
                '/ClusterManager/getFlaskLogs',
                request_serializer=cluster__manager__pb2.GetFlaskLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getLogFile = channel.unary_unary(
                '/ClusterManager/getLogFile',
                request_serializer=cluster__manager__pb2.GetLogFileMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.startContainersInExecution = channel.unary_unary(
                '/ClusterManager/startContainersInExecution',
                request_serializer=cluster__manager__pb2.StartContainersInExecutionMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.attachContainersInExecutionToNetworks = channel.unary_unary(
                '/ClusterManager/attachContainersInExecutionToNetworks',
                request_serializer=cluster__manager__pb2.AttachContainersToNetworksInExecutionMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.installLibraries = channel.unary_unary(
                '/ClusterManager/installLibraries',
                request_serializer=cluster__manager__pb2.InstallLibrariesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.applyKafkaConfig = channel.unary_unary(
                '/ClusterManager/applyKafkaConfig',
                request_serializer=cluster__manager__pb2.ApplyKafkaConfigMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startSdnController = channel.unary_unary(
                '/ClusterManager/startSdnController',
                request_serializer=cluster__manager__pb2.StartSdnControllerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.applyResourceConstraints = channel.unary_unary(
                '/ClusterManager/applyResourceConstraints',
                request_serializer=cluster__manager__pb2.ApplyResouceConstraintsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.createOvsSwitches = channel.unary_unary(
                '/ClusterManager/createOvsSwitches',
                request_serializer=cluster__manager__pb2.CreateOvsSwitchesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.pingExecution = channel.unary_unary(
                '/ClusterManager/pingExecution',
                request_serializer=cluster__manager__pb2.PingExecutionMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.configureOvs = channel.unary_unary(
                '/ClusterManager/configureOvs',
                request_serializer=cluster__manager__pb2.ConfigureOvsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startSdnControllerMonitor = channel.unary_unary(
                '/ClusterManager/startSdnControllerMonitor',
                request_serializer=cluster__manager__pb2.StartSdnControllerMonitorMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.createUsers = channel.unary_unary(
                '/ClusterManager/createUsers',
                request_serializer=cluster__manager__pb2.CreateUsersMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.createVulnerabilities = channel.unary_unary(
                '/ClusterManager/createVulnerabilities',
                request_serializer=cluster__manager__pb2.CreateVulnsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.createFlags = channel.unary_unary(
                '/ClusterManager/createFlags',
                request_serializer=cluster__manager__pb2.CreateFlagsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.createTopology = channel.unary_unary(
                '/ClusterManager/createTopology',
                request_serializer=cluster__manager__pb2.CreateTopologyMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startTrafficManagers = channel.unary_unary(
                '/ClusterManager/startTrafficManagers',
                request_serializer=cluster__manager__pb2.StartTrafficManagersMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startTrafficGenerators = channel.unary_unary(
                '/ClusterManager/startTrafficGenerators',
                request_serializer=cluster__manager__pb2.StartTrafficGeneratorsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startClientPopulation = channel.unary_unary(
                '/ClusterManager/startClientPopulation',
                request_serializer=cluster__manager__pb2.StartClientPopulationMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startKafkaClientProducer = channel.unary_unary(
                '/ClusterManager/startKafkaClientProducer',
                request_serializer=cluster__manager__pb2.StartKafkaClientProducerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopKafkaClientProducer = channel.unary_unary(
                '/ClusterManager/stopKafkaClientProducer',
                request_serializer=cluster__manager__pb2.StopKafkaClientProducerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startSnortIdses = channel.unary_unary(
                '/ClusterManager/startSnortIdses',
                request_serializer=cluster__manager__pb2.StartSnortIdsesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startSnortIdsesMonitorThreads = channel.unary_unary(
                '/ClusterManager/startSnortIdsesMonitorThreads',
                request_serializer=cluster__manager__pb2.StartSnortIdsesMonitorThreadsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startOssecIdses = channel.unary_unary(
                '/ClusterManager/startOssecIdses',
                request_serializer=cluster__manager__pb2.StartOSSECIdsesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startOssecIdsesMonitorThreads = channel.unary_unary(
                '/ClusterManager/startOssecIdsesMonitorThreads',
                request_serializer=cluster__manager__pb2.StartOSSECIdsesMonitorThreadsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startElkStack = channel.unary_unary(
                '/ClusterManager/startElkStack',
                request_serializer=cluster__manager__pb2.StartElkStackMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startHostManagers = channel.unary_unary(
                '/ClusterManager/startHostManagers',
                request_serializer=cluster__manager__pb2.StartHostManagersMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.applyFileBeatsConfig = channel.unary_unary(
                '/ClusterManager/applyFileBeatsConfig',
                request_serializer=cluster__manager__pb2.ApplyFileBeatConfigsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.applyPacketBeatsConfig = channel.unary_unary(
                '/ClusterManager/applyPacketBeatsConfig',
                request_serializer=cluster__manager__pb2.ApplyPacketBeatConfigsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.applyMetricBeatsConfig = channel.unary_unary(
                '/ClusterManager/applyMetricBeatsConfig',
                request_serializer=cluster__manager__pb2.ApplyMetricBeatConfigsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.applyHeartBeatsConfig = channel.unary_unary(
                '/ClusterManager/applyHeartBeatsConfig',
                request_serializer=cluster__manager__pb2.ApplyHeartBeatConfigsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startFilebeats = channel.unary_unary(
                '/ClusterManager/startFilebeats',
                request_serializer=cluster__manager__pb2.StartFileBeatsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startPacketbeats = channel.unary_unary(
                '/ClusterManager/startPacketbeats',
                request_serializer=cluster__manager__pb2.StartPacketBeatsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startMetricbeats = channel.unary_unary(
                '/ClusterManager/startMetricbeats',
                request_serializer=cluster__manager__pb2.StartMetricBeatsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startHeartbeats = channel.unary_unary(
                '/ClusterManager/startHeartbeats',
                request_serializer=cluster__manager__pb2.StartHeartBeatsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopAllExecutionsOfEmulation = channel.unary_unary(
                '/ClusterManager/stopAllExecutionsOfEmulation',
                request_serializer=cluster__manager__pb2.StopAllExecutionsOfEmulationMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopExecution = channel.unary_unary(
                '/ClusterManager/stopExecution',
                request_serializer=cluster__manager__pb2.StopExecutionMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopAllExecutions = channel.unary_unary(
                '/ClusterManager/stopAllExecutions',
                request_serializer=cluster__manager__pb2.StopAllExecutionsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.cleanAllExecutions = channel.unary_unary(
                '/ClusterManager/cleanAllExecutions',
                request_serializer=cluster__manager__pb2.CleanAllExecutionsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.cleanAllExecutionsOfEmulation = channel.unary_unary(
                '/ClusterManager/cleanAllExecutionsOfEmulation',
                request_serializer=cluster__manager__pb2.CleanAllExecutionsOfEmulationMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.cleanExecution = channel.unary_unary(
                '/ClusterManager/cleanExecution',
                request_serializer=cluster__manager__pb2.CleanExecutionMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startTrafficManager = channel.unary_unary(
                '/ClusterManager/startTrafficManager',
                request_serializer=cluster__manager__pb2.StartTrafficManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopTrafficManager = channel.unary_unary(
                '/ClusterManager/stopTrafficManager',
                request_serializer=cluster__manager__pb2.StartTrafficManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopTrafficManagers = channel.unary_unary(
                '/ClusterManager/stopTrafficManagers',
                request_serializer=cluster__manager__pb2.StartTrafficManagersMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startClientManager = channel.unary_unary(
                '/ClusterManager/startClientManager',
                request_serializer=cluster__manager__pb2.StartClientManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopClientPopulation = channel.unary_unary(
                '/ClusterManager/stopClientPopulation',
                request_serializer=cluster__manager__pb2.StopClientPopulationMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopClientManager = channel.unary_unary(
                '/ClusterManager/stopClientManager',
                request_serializer=cluster__manager__pb2.StopClientManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.getNumActiveClients = channel.unary_unary(
                '/ClusterManager/getNumActiveClients',
                request_serializer=cluster__manager__pb2.GetNumActiveClientsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.GetNumClientsDTO.FromString,
                )
        self.startTrafficGenerator = channel.unary_unary(
                '/ClusterManager/startTrafficGenerator',
                request_serializer=cluster__manager__pb2.StartTrafficGeneratorMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopTrafficGenerators = channel.unary_unary(
                '/ClusterManager/stopTrafficGenerators',
                request_serializer=cluster__manager__pb2.StopTrafficGeneratorsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopTrafficGenerator = channel.unary_unary(
                '/ClusterManager/stopTrafficGenerator',
                request_serializer=cluster__manager__pb2.StopTrafficGeneratorMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.getClientManagersInfo = channel.unary_unary(
                '/ClusterManager/getClientManagersInfo',
                request_serializer=cluster__manager__pb2.GetClientManagersInfoMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ClientManagersInfoDTO.FromString,
                )
        self.getTrafficManagersInfo = channel.unary_unary(
                '/ClusterManager/getTrafficManagersInfo',
                request_serializer=cluster__manager__pb2.GetTrafficManagersInfoMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.TrafficManagersInfoDTO.FromString,
                )
        self.stopAllRunningContainers = channel.unary_unary(
                '/ClusterManager/stopAllRunningContainers',
                request_serializer=cluster__manager__pb2.StopAllRunningContainersMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopContainer = channel.unary_unary(
                '/ClusterManager/stopContainer',
                request_serializer=cluster__manager__pb2.StopContainerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.removeAllStoppedContainers = channel.unary_unary(
                '/ClusterManager/removeAllStoppedContainers',
                request_serializer=cluster__manager__pb2.RemoveAllStoppedContainersMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.removeContainer = channel.unary_unary(
                '/ClusterManager/removeContainer',
                request_serializer=cluster__manager__pb2.RemoveContainerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.removeAllContainerImages = channel.unary_unary(
                '/ClusterManager/removeAllContainerImages',
                request_serializer=cluster__manager__pb2.RemoveAllContainerImagesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.removeContainerImage = channel.unary_unary(
                '/ClusterManager/removeContainerImage',
                request_serializer=cluster__manager__pb2.RemoveContainerImageMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.listAllContainerImages = channel.unary_unary(
                '/ClusterManager/listAllContainerImages',
                request_serializer=cluster__manager__pb2.ListAllContainerImagesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ContainerImagesDTO.FromString,
                )
        self.listAllDockerNetworks = channel.unary_unary(
                '/ClusterManager/listAllDockerNetworks',
                request_serializer=cluster__manager__pb2.ListAllDockerNetworksMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.DockerNetworksDTO.FromString,
                )
        self.startAllStoppedContainers = channel.unary_unary(
                '/ClusterManager/startAllStoppedContainers',
                request_serializer=cluster__manager__pb2.StartAllStoppedContainersMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startContainer = channel.unary_unary(
                '/ClusterManager/startContainer',
                request_serializer=cluster__manager__pb2.StartContainerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.listAllRunningContainers = channel.unary_unary(
                '/ClusterManager/listAllRunningContainers',
                request_serializer=cluster__manager__pb2.ListAllRunningContainersMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.RunningContainersDTO.FromString,
                )
        self.listAllRunningEmulations = channel.unary_unary(
                '/ClusterManager/listAllRunningEmulations',
                request_serializer=cluster__manager__pb2.ListAllRunningEmulationsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.RunningEmulationsDTO.FromString,
                )
        self.listAllStoppedContainers = channel.unary_unary(
                '/ClusterManager/listAllStoppedContainers',
                request_serializer=cluster__manager__pb2.ListAllStoppedContainersMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.StoppedContainersDTO.FromString,
                )
        self.createEmulationNetworks = channel.unary_unary(
                '/ClusterManager/createEmulationNetworks',
                request_serializer=cluster__manager__pb2.CreateEmulationNetworksMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopDockerStatsManagerThread = channel.unary_unary(
                '/ClusterManager/stopDockerStatsManagerThread',
                request_serializer=cluster__manager__pb2.StopDockerStatsManagerThreadMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.getDockerStatsManagerStatus = channel.unary_unary(
                '/ClusterManager/getDockerStatsManagerStatus',
                request_serializer=cluster__manager__pb2.GetDockerStatsManagerStatusMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.DockerStatsMonitorStatusDTO.FromString,
                )
        self.removeDockerNetworks = channel.unary_unary(
                '/ClusterManager/removeDockerNetworks',
                request_serializer=cluster__manager__pb2.RemoveDockerNetworksMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.removeAllDockerNetworks = channel.unary_unary(
                '/ClusterManager/removeAllDockerNetworks',
                request_serializer=cluster__manager__pb2.RemoveAllDockerNetworksMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.getDockerStatsManagersInfo = channel.unary_unary(
                '/ClusterManager/getDockerStatsManagersInfo',
                request_serializer=cluster__manager__pb2.GetDockerStatsManagersInfoMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.DockerStatsManagersInfoDTO.FromString,
                )
        self.startElkManager = channel.unary_unary(
                '/ClusterManager/startElkManager',
                request_serializer=cluster__manager__pb2.StartElkManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopElkManager = channel.unary_unary(
                '/ClusterManager/stopElkManager',
                request_serializer=cluster__manager__pb2.StopElkManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.getElkStatus = channel.unary_unary(
                '/ClusterManager/getElkStatus',
                request_serializer=cluster__manager__pb2.GetElkStackStatusMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ElkStatusDTO.FromString,
                )
        self.stopElkStack = channel.unary_unary(
                '/ClusterManager/stopElkStack',
                request_serializer=cluster__manager__pb2.StopElkStackMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startElastic = channel.unary_unary(
                '/ClusterManager/startElastic',
                request_serializer=cluster__manager__pb2.StartElasticServiceMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopElastic = channel.unary_unary(
                '/ClusterManager/stopElastic',
                request_serializer=cluster__manager__pb2.StopElasticServiceMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startKibana = channel.unary_unary(
                '/ClusterManager/startKibana',
                request_serializer=cluster__manager__pb2.StartKibanaServiceMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopKibana = channel.unary_unary(
                '/ClusterManager/stopKibana',
                request_serializer=cluster__manager__pb2.StopKibanaServiceMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startLogstash = channel.unary_unary(
                '/ClusterManager/startLogstash',
                request_serializer=cluster__manager__pb2.StartLogstashServiceMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopLogstash = channel.unary_unary(
                '/ClusterManager/stopLogstash',
                request_serializer=cluster__manager__pb2.StopLogstashServiceMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.getElkManagersInfo = channel.unary_unary(
                '/ClusterManager/getElkManagersInfo',
                request_serializer=cluster__manager__pb2.GetElkManagersInfoMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ElkManagersInfoDTO.FromString,
                )
        self.startContainersOfExecution = channel.unary_unary(
                '/ClusterManager/startContainersOfExecution',
                request_serializer=cluster__manager__pb2.StartContainersOfExecutionMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.runContainer = channel.unary_unary(
                '/ClusterManager/runContainer',
                request_serializer=cluster__manager__pb2.RunContainerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopContainersOfExecution = channel.unary_unary(
                '/ClusterManager/stopContainersOfExecution',
                request_serializer=cluster__manager__pb2.StopContainersOfExecutionMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startHostManager = channel.unary_unary(
                '/ClusterManager/startHostManager',
                request_serializer=cluster__manager__pb2.StartHostManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopHostManagers = channel.unary_unary(
                '/ClusterManager/stopHostManagers',
                request_serializer=cluster__manager__pb2.StopHostManagersMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopHostManager = channel.unary_unary(
                '/ClusterManager/stopHostManager',
                request_serializer=cluster__manager__pb2.StopHostManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopFilebeats = channel.unary_unary(
                '/ClusterManager/stopFilebeats',
                request_serializer=cluster__manager__pb2.StopFilebeatsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopPacketbeats = channel.unary_unary(
                '/ClusterManager/stopPacketbeats',
                request_serializer=cluster__manager__pb2.StopPacketbeatsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopMetricbeats = channel.unary_unary(
                '/ClusterManager/stopMetricbeats',
                request_serializer=cluster__manager__pb2.StopMetricbeatsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopHeartbeats = channel.unary_unary(
                '/ClusterManager/stopHeartbeats',
                request_serializer=cluster__manager__pb2.StopHeartbeatsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startHostMonitorThreads = channel.unary_unary(
                '/ClusterManager/startHostMonitorThreads',
                request_serializer=cluster__manager__pb2.StartHostMonitorThreadsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startHostMonitorThread = channel.unary_unary(
                '/ClusterManager/startHostMonitorThread',
                request_serializer=cluster__manager__pb2.StartHostMonitorThreadMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startFilebeat = channel.unary_unary(
                '/ClusterManager/startFilebeat',
                request_serializer=cluster__manager__pb2.StartFileBeatMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startPacketbeat = channel.unary_unary(
                '/ClusterManager/startPacketbeat',
                request_serializer=cluster__manager__pb2.StartPacketBeatMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startMetricbeat = channel.unary_unary(
                '/ClusterManager/startMetricbeat',
                request_serializer=cluster__manager__pb2.StartMetricBeatMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startHeartbeat = channel.unary_unary(
                '/ClusterManager/startHeartbeat',
                request_serializer=cluster__manager__pb2.StartHeartBeatMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopFilebeat = channel.unary_unary(
                '/ClusterManager/stopFilebeat',
                request_serializer=cluster__manager__pb2.StopFileBeatMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopPacketbeat = channel.unary_unary(
                '/ClusterManager/stopPacketbeat',
                request_serializer=cluster__manager__pb2.StopPacketBeatMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopMetricbeat = channel.unary_unary(
                '/ClusterManager/stopMetricbeat',
                request_serializer=cluster__manager__pb2.StopMetricBeatMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopHeartbeat = channel.unary_unary(
                '/ClusterManager/stopHeartbeat',
                request_serializer=cluster__manager__pb2.StopHeartBeatMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.applyFileBeatConfig = channel.unary_unary(
                '/ClusterManager/applyFileBeatConfig',
                request_serializer=cluster__manager__pb2.ApplyFileBeatConfigMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.applyPacketBeatConfig = channel.unary_unary(
                '/ClusterManager/applyPacketBeatConfig',
                request_serializer=cluster__manager__pb2.ApplyPacketBeatConfigMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.applyMetricBeatConfig = channel.unary_unary(
                '/ClusterManager/applyMetricBeatConfig',
                request_serializer=cluster__manager__pb2.ApplyMetricBeatConfigMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.applyHeartBeatConfig = channel.unary_unary(
                '/ClusterManager/applyHeartBeatConfig',
                request_serializer=cluster__manager__pb2.ApplyHeartBeatConfigMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.getHostMonitorThreadsStatuses = channel.unary_unary(
                '/ClusterManager/getHostMonitorThreadsStatuses',
                request_serializer=cluster__manager__pb2.GetHostMonitorThreadsStatusesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.HostManagerStatusesDTO.FromString,
                )
        self.getHostManagersInfo = channel.unary_unary(
                '/ClusterManager/getHostManagersInfo',
                request_serializer=cluster__manager__pb2.GetHostManagersInfoMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.HostManagersInfoDTO.FromString,
                )
        self.stopKafkaManager = channel.unary_unary(
                '/ClusterManager/stopKafkaManager',
                request_serializer=cluster__manager__pb2.StopKafkaManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startKafkaManager = channel.unary_unary(
                '/ClusterManager/startKafkaManager',
                request_serializer=cluster__manager__pb2.StartKafkaManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.createKafkaTopics = channel.unary_unary(
                '/ClusterManager/createKafkaTopics',
                request_serializer=cluster__manager__pb2.CreateKafkaTopicsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.getKafkaStatus = channel.unary_unary(
                '/ClusterManager/getKafkaStatus',
                request_serializer=cluster__manager__pb2.GetKafkaManagerStatusMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.KafkaStatusDTO.FromString,
                )
        self.stopKafkaServer = channel.unary_unary(
                '/ClusterManager/stopKafkaServer',
                request_serializer=cluster__manager__pb2.StopKafkaServerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startKafkaServer = channel.unary_unary(
                '/ClusterManager/startKafkaServer',
                request_serializer=cluster__manager__pb2.StopKafkaServerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.getKafkaManagersInfo = channel.unary_unary(
                '/ClusterManager/getKafkaManagersInfo',
                request_serializer=cluster__manager__pb2.GetKafkaManagersInfoMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.KafkaManagersInfoDTO.FromString,
                )
        self.stopOSSECIDSes = channel.unary_unary(
                '/ClusterManager/stopOSSECIDSes',
                request_serializer=cluster__manager__pb2.StopOSSECIDSesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startOSSECIDSes = channel.unary_unary(
                '/ClusterManager/startOSSECIDSes',
                request_serializer=cluster__manager__pb2.StartOSSECIDSesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopOSSECIDS = channel.unary_unary(
                '/ClusterManager/stopOSSECIDS',
                request_serializer=cluster__manager__pb2.StopOSSECIDSMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startOSSECIDS = channel.unary_unary(
                '/ClusterManager/startOSSECIDS',
                request_serializer=cluster__manager__pb2.StartOSSECIDSMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startOSSECIDSManagers = channel.unary_unary(
                '/ClusterManager/startOSSECIDSManagers',
                request_serializer=cluster__manager__pb2.StartOSSECIDSManagers.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopOSSECIDSManagers = channel.unary_unary(
                '/ClusterManager/stopOSSECIDSManagers',
                request_serializer=cluster__manager__pb2.StopOSSECIDSManagers.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startOSSECIDSManager = channel.unary_unary(
                '/ClusterManager/startOSSECIDSManager',
                request_serializer=cluster__manager__pb2.StartOSSECIDSManager.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopOSSECIDSManager = channel.unary_unary(
                '/ClusterManager/stopOSSECIDSManager',
                request_serializer=cluster__manager__pb2.StopOSSECIDSManager.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startOSSECIDSMonitorThread = channel.unary_unary(
                '/ClusterManager/startOSSECIDSMonitorThread',
                request_serializer=cluster__manager__pb2.StartOSSECIDSMonitorThreadMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopOSSECIDSMonitorThread = channel.unary_unary(
                '/ClusterManager/stopOSSECIDSMonitorThread',
                request_serializer=cluster__manager__pb2.StopOSSECIDSMonitorThreadMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopOSSECIDSMonitorThreads = channel.unary_unary(
                '/ClusterManager/stopOSSECIDSMonitorThreads',
                request_serializer=cluster__manager__pb2.StopOSSECIDSMonitorThreadsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.getOSSECIDSMonitorThreadStatuses = channel.unary_unary(
                '/ClusterManager/getOSSECIDSMonitorThreadStatuses',
                request_serializer=cluster__manager__pb2.GetOSSECIDSMonitorThreadStatusesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OSSECIdsMonitorThreadStatusesDTO.FromString,
                )
        self.getOSSECIdsManagersInfo = channel.unary_unary(
                '/ClusterManager/getOSSECIdsManagersInfo',
                request_serializer=cluster__manager__pb2.GetOSSECIDSManagersInfoMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OSSECIdsManagersInfoDTO.FromString,
                )
        self.startRyuManager = channel.unary_unary(
                '/ClusterManager/startRyuManager',
                request_serializer=cluster__manager__pb2.StartRyuManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopRyuManager = channel.unary_unary(
                '/ClusterManager/stopRyuManager',
                request_serializer=cluster__manager__pb2.StopRyuManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.getRyuStatus = channel.unary_unary(
                '/ClusterManager/getRyuStatus',
                request_serializer=cluster__manager__pb2.GetRyuServiceStatusMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.RyuManagerStatusDTO.FromString,
                )
        self.startRyu = channel.unary_unary(
                '/ClusterManager/startRyu',
                request_serializer=cluster__manager__pb2.StartRyuServiceMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopRyu = channel.unary_unary(
                '/ClusterManager/stopRyu',
                request_serializer=cluster__manager__pb2.StopRyuServiceMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.getRyuManagersInfo = channel.unary_unary(
                '/ClusterManager/getRyuManagersInfo',
                request_serializer=cluster__manager__pb2.GetRyuManagersInfoMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.RyuManagersInfoDTO.FromString,
                )
        self.stopSnortIdses = channel.unary_unary(
                '/ClusterManager/stopSnortIdses',
                request_serializer=cluster__manager__pb2.StopSnortIdsesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopSnortIdsesMonitorThreads = channel.unary_unary(
                '/ClusterManager/stopSnortIdsesMonitorThreads',
                request_serializer=cluster__manager__pb2.StopSnortIdsesMonitorThreadsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopSnortIds = channel.unary_unary(
                '/ClusterManager/stopSnortIds',
                request_serializer=cluster__manager__pb2.StopSnortMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopSnortIdsMonitorThread = channel.unary_unary(
                '/ClusterManager/stopSnortIdsMonitorThread',
                request_serializer=cluster__manager__pb2.StopSnortIdsMonitorThreadMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startSnortIds = channel.unary_unary(
                '/ClusterManager/startSnortIds',
                request_serializer=cluster__manager__pb2.StartSnortMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startSnortIdsMonitorThreads = channel.unary_unary(
                '/ClusterManager/startSnortIdsMonitorThreads',
                request_serializer=cluster__manager__pb2.StartSnortIdsMonitorThreadsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startSnortIdsMonitorThread = channel.unary_unary(
                '/ClusterManager/startSnortIdsMonitorThread',
                request_serializer=cluster__manager__pb2.StartSnortIdsMonitorThreadMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startSnortIdsManagers = channel.unary_unary(
                '/ClusterManager/startSnortIdsManagers',
                request_serializer=cluster__manager__pb2.StartSnortIdsManagersMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopSnortIdsManagers = channel.unary_unary(
                '/ClusterManager/stopSnortIdsManagers',
                request_serializer=cluster__manager__pb2.StopSnortIdsManagersMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startSnortIdsManager = channel.unary_unary(
                '/ClusterManager/startSnortIdsManager',
                request_serializer=cluster__manager__pb2.StartSnortIdsManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopSnortIdsManager = channel.unary_unary(
                '/ClusterManager/stopSnortIdsManager',
                request_serializer=cluster__manager__pb2.StopSnortIdsManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopSnortIdsMonitorThreads = channel.unary_unary(
                '/ClusterManager/stopSnortIdsMonitorThreads',
                request_serializer=cluster__manager__pb2.StopSnortIdsMonitorThreadsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.getSnortIdsMonitorThreadStatuses = channel.unary_unary(
                '/ClusterManager/getSnortIdsMonitorThreadStatuses',
                request_serializer=cluster__manager__pb2.GetSnortIdsMonitorThreadStatusesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.SnortIdsMonitorThreadStatusesDTO.FromString,
                )
        self.getSnortIdsManagersInfo = channel.unary_unary(
                '/ClusterManager/getSnortIdsManagersInfo',
                request_serializer=cluster__manager__pb2.GetSnortIdsManagersInfoMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.SnortIdsManagersInfoDTO.FromString,
                )
        self.getExecutionInfo = channel.unary_unary(
                '/ClusterManager/getExecutionInfo',
                request_serializer=cluster__manager__pb2.GetExecutionInfoMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ExecutionInfoDTO.FromString,
                )
        self.listKibanaTunnels = channel.unary_unary(
                '/ClusterManager/listKibanaTunnels',
                request_serializer=cluster__manager__pb2.ListKibanaTunnelsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.KibanaTunnelsDTO.FromString,
                )
        self.createKibanaTunnel = channel.unary_unary(
                '/ClusterManager/createKibanaTunnel',
                request_serializer=cluster__manager__pb2.CreateKibanaTunnelMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.listRyuTunnels = channel.unary_unary(
                '/ClusterManager/listRyuTunnels',
                request_serializer=cluster__manager__pb2.ListRyuTunnelsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.RyuTunnelsDTO.FromString,
                )
        self.createRyuTunnel = channel.unary_unary(
                '/ClusterManager/createRyuTunnel',
                request_serializer=cluster__manager__pb2.CreateKibanaTunnelMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.removeKibanaTunnel = channel.unary_unary(
                '/ClusterManager/removeKibanaTunnel',
                request_serializer=cluster__manager__pb2.RemoveKibanaTunnelMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.removeRyuTunnel = channel.unary_unary(
                '/ClusterManager/removeRyuTunnel',
                request_serializer=cluster__manager__pb2.RemoveRyuTunnelMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopHostMonitorThreads = channel.unary_unary(
                '/ClusterManager/stopHostMonitorThreads',
                request_serializer=cluster__manager__pb2.StopHostMonitorThreadsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopHostMonitorThread = channel.unary_unary(
                '/ClusterManager/stopHostMonitorThread',
                request_serializer=cluster__manager__pb2.StopHostMonitorThreadMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startRyuMonitor = channel.unary_unary(
                '/ClusterManager/startRyuMonitor',
                request_serializer=cluster__manager__pb2.StartRyuMonitorThreadMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopRyuMonitor = channel.unary_unary(
                '/ClusterManager/stopRyuMonitor',
                request_serializer=cluster__manager__pb2.StopRyuMonitorThreadMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.getRyuControllerLogs = channel.unary_unary(
                '/ClusterManager/getRyuControllerLogs',
                request_serializer=cluster__manager__pb2.GetRyuControllerLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getRyuManagerLogs = channel.unary_unary(
                '/ClusterManager/getRyuManagerLogs',
                request_serializer=cluster__manager__pb2.GetRyuManagerLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getElkLogs = channel.unary_unary(
                '/ClusterManager/getElkLogs',
                request_serializer=cluster__manager__pb2.GetElkLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getElkManagerLogs = channel.unary_unary(
                '/ClusterManager/getElkManagerLogs',
                request_serializer=cluster__manager__pb2.GetElkManagerLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getTrafficManagerLogs = channel.unary_unary(
                '/ClusterManager/getTrafficManagerLogs',
                request_serializer=cluster__manager__pb2.GetTrafficManagerLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getHostManagerLogs = channel.unary_unary(
                '/ClusterManager/getHostManagerLogs',
                request_serializer=cluster__manager__pb2.GetHostManagerLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getOSSECIdsLogs = channel.unary_unary(
                '/ClusterManager/getOSSECIdsLogs',
                request_serializer=cluster__manager__pb2.GetOSSECIdsLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getOSSECIdsManagerLogsMsg = channel.unary_unary(
                '/ClusterManager/getOSSECIdsManagerLogsMsg',
                request_serializer=cluster__manager__pb2.GetOSSECIdsManagerLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getSnortIdsLogs = channel.unary_unary(
                '/ClusterManager/getSnortIdsLogs',
                request_serializer=cluster__manager__pb2.GetSnortIdsLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getSnortIdsManagerLogsMsg = channel.unary_unary(
                '/ClusterManager/getSnortIdsManagerLogsMsg',
                request_serializer=cluster__manager__pb2.GetSnortIdsManagerLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getKafkaLogs = channel.unary_unary(
                '/ClusterManager/getKafkaLogs',
                request_serializer=cluster__manager__pb2.GetKafkaLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getKafkaManagerLogs = channel.unary_unary(
                '/ClusterManager/getKafkaManagerLogs',
                request_serializer=cluster__manager__pb2.GetKafkaManagerLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getClientManagerLogsMsg = channel.unary_unary(
                '/ClusterManager/getClientManagerLogsMsg',
                request_serializer=cluster__manager__pb2.GetClientManagerLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getContainerLogs = channel.unary_unary(
                '/ClusterManager/getContainerLogs',
                request_serializer=cluster__manager__pb2.GetContainerLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getClusterManagerLogs = channel.unary_unary(
                '/ClusterManager/getClusterManagerLogs',
                request_serializer=cluster__manager__pb2.GetClusterManagerLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getExecutionTimeSeriesData = channel.unary_unary(
                '/ClusterManager/getExecutionTimeSeriesData',
                request_serializer=cluster__manager__pb2.GetExecutionTimeSeriesDataMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.EmulationMetricsTimeSeriesDTO.FromString,
                )
        self.startSparkServers = channel.unary_unary(
                '/ClusterManager/startSparkServers',
                request_serializer=cluster__manager__pb2.StartSparkServersMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopSparkServers = channel.unary_unary(
                '/ClusterManager/stopSparkServers',
                request_serializer=cluster__manager__pb2.StopSparkServersMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startSparkServer = channel.unary_unary(
                '/ClusterManager/startSparkServer',
                request_serializer=cluster__manager__pb2.StartSparkServerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopSparkServer = channel.unary_unary(
                '/ClusterManager/stopSparkServer',
                request_serializer=cluster__manager__pb2.StopSparkServerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.checkPid = channel.unary_unary(
                '/ClusterManager/checkPid',
                request_serializer=cluster__manager__pb2.CheckPidMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.stopPid = channel.unary_unary(
                '/ClusterManager/stopPid',
                request_serializer=cluster__manager__pb2.StopPidMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )


class ClusterManagerServicer(object):
    """Interface exported by the server
    """

    def getNodeStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startPostgreSQL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startCAdvisor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startNodeExporter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startGrafana(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startPrometheus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startPgAdmin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startNginx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startFlask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startDockerStatsManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startDockerStatsManagerThread(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startDockerEngine(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopPostgreSQL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopCAdvisor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopNodeExporter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopGrafana(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopPrometheus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopPgAdmin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopNginx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopFlask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopDockerStatsManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopDockerEngine(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCsleLogFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDockerStatsManagerLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPrometheusLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNodeExporterLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCadvisorLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPgAdminLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGrafanaLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNginxLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDockerLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPostrgreSQLLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFlaskLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLogFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startContainersInExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def attachContainersInExecutionToNetworks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def installLibraries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyKafkaConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSdnController(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyResourceConstraints(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createOvsSwitches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pingExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def configureOvs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSdnControllerMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createVulnerabilities(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createFlags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createTopology(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startTrafficManagers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startTrafficGenerators(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startClientPopulation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startKafkaClientProducer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopKafkaClientProducer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSnortIdses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSnortIdsesMonitorThreads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startOssecIdses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startOssecIdsesMonitorThreads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startElkStack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startHostManagers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyFileBeatsConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyPacketBeatsConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyMetricBeatsConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyHeartBeatsConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startFilebeats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startPacketbeats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startMetricbeats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startHeartbeats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopAllExecutionsOfEmulation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopAllExecutions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cleanAllExecutions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cleanAllExecutionsOfEmulation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cleanExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startTrafficManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopTrafficManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopTrafficManagers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startClientManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopClientPopulation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopClientManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNumActiveClients(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startTrafficGenerator(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopTrafficGenerators(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopTrafficGenerator(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getClientManagersInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTrafficManagersInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopAllRunningContainers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopContainer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeAllStoppedContainers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeContainer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeAllContainerImages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeContainerImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listAllContainerImages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listAllDockerNetworks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startAllStoppedContainers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startContainer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listAllRunningContainers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listAllRunningEmulations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listAllStoppedContainers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createEmulationNetworks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopDockerStatsManagerThread(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDockerStatsManagerStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeDockerNetworks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeAllDockerNetworks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDockerStatsManagersInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startElkManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopElkManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getElkStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopElkStack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startElastic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopElastic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startKibana(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopKibana(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startLogstash(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopLogstash(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getElkManagersInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startContainersOfExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def runContainer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopContainersOfExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startHostManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopHostManagers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopHostManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopFilebeats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopPacketbeats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopMetricbeats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopHeartbeats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startHostMonitorThreads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startHostMonitorThread(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startFilebeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startPacketbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startMetricbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopFilebeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopPacketbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopMetricbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyFileBeatConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyPacketBeatConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyMetricBeatConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyHeartBeatConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getHostMonitorThreadsStatuses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getHostManagersInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopKafkaManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startKafkaManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createKafkaTopics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getKafkaStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopKafkaServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startKafkaServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getKafkaManagersInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopOSSECIDSes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startOSSECIDSes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopOSSECIDS(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startOSSECIDS(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startOSSECIDSManagers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopOSSECIDSManagers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startOSSECIDSManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopOSSECIDSManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startOSSECIDSMonitorThread(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopOSSECIDSMonitorThread(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopOSSECIDSMonitorThreads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getOSSECIDSMonitorThreadStatuses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getOSSECIdsManagersInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startRyuManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopRyuManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRyuStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startRyu(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopRyu(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRyuManagersInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopSnortIdses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopSnortIdsesMonitorThreads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopSnortIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopSnortIdsMonitorThread(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSnortIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSnortIdsMonitorThreads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSnortIdsMonitorThread(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSnortIdsManagers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopSnortIdsManagers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSnortIdsManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopSnortIdsManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopSnortIdsMonitorThreads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSnortIdsMonitorThreadStatuses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSnortIdsManagersInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getExecutionInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listKibanaTunnels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createKibanaTunnel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listRyuTunnels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createRyuTunnel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeKibanaTunnel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeRyuTunnel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopHostMonitorThreads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopHostMonitorThread(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startRyuMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopRyuMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRyuControllerLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRyuManagerLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getElkLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getElkManagerLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTrafficManagerLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getHostManagerLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getOSSECIdsLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getOSSECIdsManagerLogsMsg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSnortIdsLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSnortIdsManagerLogsMsg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getKafkaLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getKafkaManagerLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getClientManagerLogsMsg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getContainerLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getClusterManagerLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getExecutionTimeSeriesData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSparkServers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopSparkServers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSparkServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopSparkServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkPid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopPid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClusterManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getNodeStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getNodeStatus,
                    request_deserializer=cluster__manager__pb2.GetNodeStatusMsg.FromString,
                    response_serializer=cluster__manager__pb2.NodeStatusDTO.SerializeToString,
            ),
            'startPostgreSQL': grpc.unary_unary_rpc_method_handler(
                    servicer.startPostgreSQL,
                    request_deserializer=cluster__manager__pb2.StartPostgreSQLMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startCAdvisor': grpc.unary_unary_rpc_method_handler(
                    servicer.startCAdvisor,
                    request_deserializer=cluster__manager__pb2.StartCAdvisorMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startNodeExporter': grpc.unary_unary_rpc_method_handler(
                    servicer.startNodeExporter,
                    request_deserializer=cluster__manager__pb2.StartNodeExporterMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startGrafana': grpc.unary_unary_rpc_method_handler(
                    servicer.startGrafana,
                    request_deserializer=cluster__manager__pb2.StartGrafanaMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startPrometheus': grpc.unary_unary_rpc_method_handler(
                    servicer.startPrometheus,
                    request_deserializer=cluster__manager__pb2.StartPrometheusMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startPgAdmin': grpc.unary_unary_rpc_method_handler(
                    servicer.startPgAdmin,
                    request_deserializer=cluster__manager__pb2.StartPgAdminMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startNginx': grpc.unary_unary_rpc_method_handler(
                    servicer.startNginx,
                    request_deserializer=cluster__manager__pb2.StartNginxMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startFlask': grpc.unary_unary_rpc_method_handler(
                    servicer.startFlask,
                    request_deserializer=cluster__manager__pb2.StartFlaskMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startDockerStatsManager': grpc.unary_unary_rpc_method_handler(
                    servicer.startDockerStatsManager,
                    request_deserializer=cluster__manager__pb2.StartDockerStatsManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startDockerStatsManagerThread': grpc.unary_unary_rpc_method_handler(
                    servicer.startDockerStatsManagerThread,
                    request_deserializer=cluster__manager__pb2.StartDockerStatsManagerThreadMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startDockerEngine': grpc.unary_unary_rpc_method_handler(
                    servicer.startDockerEngine,
                    request_deserializer=cluster__manager__pb2.StartDockerEngineMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopPostgreSQL': grpc.unary_unary_rpc_method_handler(
                    servicer.stopPostgreSQL,
                    request_deserializer=cluster__manager__pb2.StopPostgreSQLMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopCAdvisor': grpc.unary_unary_rpc_method_handler(
                    servicer.stopCAdvisor,
                    request_deserializer=cluster__manager__pb2.StopCAdvisorMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopNodeExporter': grpc.unary_unary_rpc_method_handler(
                    servicer.stopNodeExporter,
                    request_deserializer=cluster__manager__pb2.StopNodeExporterMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopGrafana': grpc.unary_unary_rpc_method_handler(
                    servicer.stopGrafana,
                    request_deserializer=cluster__manager__pb2.StopGrafanaMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopPrometheus': grpc.unary_unary_rpc_method_handler(
                    servicer.stopPrometheus,
                    request_deserializer=cluster__manager__pb2.StopPrometheusMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopPgAdmin': grpc.unary_unary_rpc_method_handler(
                    servicer.stopPgAdmin,
                    request_deserializer=cluster__manager__pb2.StopPgAdminMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopNginx': grpc.unary_unary_rpc_method_handler(
                    servicer.stopNginx,
                    request_deserializer=cluster__manager__pb2.StopNginxMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopFlask': grpc.unary_unary_rpc_method_handler(
                    servicer.stopFlask,
                    request_deserializer=cluster__manager__pb2.StopFlaskMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopDockerStatsManager': grpc.unary_unary_rpc_method_handler(
                    servicer.stopDockerStatsManager,
                    request_deserializer=cluster__manager__pb2.StopDockerStatsManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopDockerEngine': grpc.unary_unary_rpc_method_handler(
                    servicer.stopDockerEngine,
                    request_deserializer=cluster__manager__pb2.StopDockerEngineMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'getCsleLogFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.getCsleLogFiles,
                    request_deserializer=cluster__manager__pb2.GetCsleLogFilesMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getDockerStatsManagerLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getDockerStatsManagerLogs,
                    request_deserializer=cluster__manager__pb2.GetDockerStatsManagerLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getPrometheusLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getPrometheusLogs,
                    request_deserializer=cluster__manager__pb2.GetPrometheusLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getNodeExporterLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getNodeExporterLogs,
                    request_deserializer=cluster__manager__pb2.GetNodeExporterLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getCadvisorLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getCadvisorLogs,
                    request_deserializer=cluster__manager__pb2.GetCAdvisorLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getPgAdminLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getPgAdminLogs,
                    request_deserializer=cluster__manager__pb2.GetPgAdminLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getGrafanaLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getGrafanaLogs,
                    request_deserializer=cluster__manager__pb2.GetGrafanaLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getNginxLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getNginxLogs,
                    request_deserializer=cluster__manager__pb2.GetNginxLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getDockerLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getDockerLogs,
                    request_deserializer=cluster__manager__pb2.GetDockerLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getPostrgreSQLLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getPostrgreSQLLogs,
                    request_deserializer=cluster__manager__pb2.GetPostgreSQLLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getFlaskLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getFlaskLogs,
                    request_deserializer=cluster__manager__pb2.GetFlaskLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getLogFile': grpc.unary_unary_rpc_method_handler(
                    servicer.getLogFile,
                    request_deserializer=cluster__manager__pb2.GetLogFileMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'startContainersInExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.startContainersInExecution,
                    request_deserializer=cluster__manager__pb2.StartContainersInExecutionMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'attachContainersInExecutionToNetworks': grpc.unary_unary_rpc_method_handler(
                    servicer.attachContainersInExecutionToNetworks,
                    request_deserializer=cluster__manager__pb2.AttachContainersToNetworksInExecutionMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'installLibraries': grpc.unary_unary_rpc_method_handler(
                    servicer.installLibraries,
                    request_deserializer=cluster__manager__pb2.InstallLibrariesMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'applyKafkaConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.applyKafkaConfig,
                    request_deserializer=cluster__manager__pb2.ApplyKafkaConfigMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startSdnController': grpc.unary_unary_rpc_method_handler(
                    servicer.startSdnController,
                    request_deserializer=cluster__manager__pb2.StartSdnControllerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'applyResourceConstraints': grpc.unary_unary_rpc_method_handler(
                    servicer.applyResourceConstraints,
                    request_deserializer=cluster__manager__pb2.ApplyResouceConstraintsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'createOvsSwitches': grpc.unary_unary_rpc_method_handler(
                    servicer.createOvsSwitches,
                    request_deserializer=cluster__manager__pb2.CreateOvsSwitchesMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'pingExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.pingExecution,
                    request_deserializer=cluster__manager__pb2.PingExecutionMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'configureOvs': grpc.unary_unary_rpc_method_handler(
                    servicer.configureOvs,
                    request_deserializer=cluster__manager__pb2.ConfigureOvsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startSdnControllerMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.startSdnControllerMonitor,
                    request_deserializer=cluster__manager__pb2.StartSdnControllerMonitorMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'createUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.createUsers,
                    request_deserializer=cluster__manager__pb2.CreateUsersMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'createVulnerabilities': grpc.unary_unary_rpc_method_handler(
                    servicer.createVulnerabilities,
                    request_deserializer=cluster__manager__pb2.CreateVulnsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'createFlags': grpc.unary_unary_rpc_method_handler(
                    servicer.createFlags,
                    request_deserializer=cluster__manager__pb2.CreateFlagsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'createTopology': grpc.unary_unary_rpc_method_handler(
                    servicer.createTopology,
                    request_deserializer=cluster__manager__pb2.CreateTopologyMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startTrafficManagers': grpc.unary_unary_rpc_method_handler(
                    servicer.startTrafficManagers,
                    request_deserializer=cluster__manager__pb2.StartTrafficManagersMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startTrafficGenerators': grpc.unary_unary_rpc_method_handler(
                    servicer.startTrafficGenerators,
                    request_deserializer=cluster__manager__pb2.StartTrafficGeneratorsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startClientPopulation': grpc.unary_unary_rpc_method_handler(
                    servicer.startClientPopulation,
                    request_deserializer=cluster__manager__pb2.StartClientPopulationMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startKafkaClientProducer': grpc.unary_unary_rpc_method_handler(
                    servicer.startKafkaClientProducer,
                    request_deserializer=cluster__manager__pb2.StartKafkaClientProducerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopKafkaClientProducer': grpc.unary_unary_rpc_method_handler(
                    servicer.stopKafkaClientProducer,
                    request_deserializer=cluster__manager__pb2.StopKafkaClientProducerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startSnortIdses': grpc.unary_unary_rpc_method_handler(
                    servicer.startSnortIdses,
                    request_deserializer=cluster__manager__pb2.StartSnortIdsesMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startSnortIdsesMonitorThreads': grpc.unary_unary_rpc_method_handler(
                    servicer.startSnortIdsesMonitorThreads,
                    request_deserializer=cluster__manager__pb2.StartSnortIdsesMonitorThreadsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startOssecIdses': grpc.unary_unary_rpc_method_handler(
                    servicer.startOssecIdses,
                    request_deserializer=cluster__manager__pb2.StartOSSECIdsesMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startOssecIdsesMonitorThreads': grpc.unary_unary_rpc_method_handler(
                    servicer.startOssecIdsesMonitorThreads,
                    request_deserializer=cluster__manager__pb2.StartOSSECIdsesMonitorThreadsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startElkStack': grpc.unary_unary_rpc_method_handler(
                    servicer.startElkStack,
                    request_deserializer=cluster__manager__pb2.StartElkStackMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startHostManagers': grpc.unary_unary_rpc_method_handler(
                    servicer.startHostManagers,
                    request_deserializer=cluster__manager__pb2.StartHostManagersMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'applyFileBeatsConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.applyFileBeatsConfig,
                    request_deserializer=cluster__manager__pb2.ApplyFileBeatConfigsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'applyPacketBeatsConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.applyPacketBeatsConfig,
                    request_deserializer=cluster__manager__pb2.ApplyPacketBeatConfigsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'applyMetricBeatsConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.applyMetricBeatsConfig,
                    request_deserializer=cluster__manager__pb2.ApplyMetricBeatConfigsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'applyHeartBeatsConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.applyHeartBeatsConfig,
                    request_deserializer=cluster__manager__pb2.ApplyHeartBeatConfigsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startFilebeats': grpc.unary_unary_rpc_method_handler(
                    servicer.startFilebeats,
                    request_deserializer=cluster__manager__pb2.StartFileBeatsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startPacketbeats': grpc.unary_unary_rpc_method_handler(
                    servicer.startPacketbeats,
                    request_deserializer=cluster__manager__pb2.StartPacketBeatsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startMetricbeats': grpc.unary_unary_rpc_method_handler(
                    servicer.startMetricbeats,
                    request_deserializer=cluster__manager__pb2.StartMetricBeatsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startHeartbeats': grpc.unary_unary_rpc_method_handler(
                    servicer.startHeartbeats,
                    request_deserializer=cluster__manager__pb2.StartHeartBeatsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopAllExecutionsOfEmulation': grpc.unary_unary_rpc_method_handler(
                    servicer.stopAllExecutionsOfEmulation,
                    request_deserializer=cluster__manager__pb2.StopAllExecutionsOfEmulationMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.stopExecution,
                    request_deserializer=cluster__manager__pb2.StopExecutionMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopAllExecutions': grpc.unary_unary_rpc_method_handler(
                    servicer.stopAllExecutions,
                    request_deserializer=cluster__manager__pb2.StopAllExecutionsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'cleanAllExecutions': grpc.unary_unary_rpc_method_handler(
                    servicer.cleanAllExecutions,
                    request_deserializer=cluster__manager__pb2.CleanAllExecutionsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'cleanAllExecutionsOfEmulation': grpc.unary_unary_rpc_method_handler(
                    servicer.cleanAllExecutionsOfEmulation,
                    request_deserializer=cluster__manager__pb2.CleanAllExecutionsOfEmulationMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'cleanExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.cleanExecution,
                    request_deserializer=cluster__manager__pb2.CleanExecutionMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startTrafficManager': grpc.unary_unary_rpc_method_handler(
                    servicer.startTrafficManager,
                    request_deserializer=cluster__manager__pb2.StartTrafficManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopTrafficManager': grpc.unary_unary_rpc_method_handler(
                    servicer.stopTrafficManager,
                    request_deserializer=cluster__manager__pb2.StartTrafficManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopTrafficManagers': grpc.unary_unary_rpc_method_handler(
                    servicer.stopTrafficManagers,
                    request_deserializer=cluster__manager__pb2.StartTrafficManagersMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startClientManager': grpc.unary_unary_rpc_method_handler(
                    servicer.startClientManager,
                    request_deserializer=cluster__manager__pb2.StartClientManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopClientPopulation': grpc.unary_unary_rpc_method_handler(
                    servicer.stopClientPopulation,
                    request_deserializer=cluster__manager__pb2.StopClientPopulationMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopClientManager': grpc.unary_unary_rpc_method_handler(
                    servicer.stopClientManager,
                    request_deserializer=cluster__manager__pb2.StopClientManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'getNumActiveClients': grpc.unary_unary_rpc_method_handler(
                    servicer.getNumActiveClients,
                    request_deserializer=cluster__manager__pb2.GetNumActiveClientsMsg.FromString,
                    response_serializer=cluster__manager__pb2.GetNumClientsDTO.SerializeToString,
            ),
            'startTrafficGenerator': grpc.unary_unary_rpc_method_handler(
                    servicer.startTrafficGenerator,
                    request_deserializer=cluster__manager__pb2.StartTrafficGeneratorMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopTrafficGenerators': grpc.unary_unary_rpc_method_handler(
                    servicer.stopTrafficGenerators,
                    request_deserializer=cluster__manager__pb2.StopTrafficGeneratorsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopTrafficGenerator': grpc.unary_unary_rpc_method_handler(
                    servicer.stopTrafficGenerator,
                    request_deserializer=cluster__manager__pb2.StopTrafficGeneratorMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'getClientManagersInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getClientManagersInfo,
                    request_deserializer=cluster__manager__pb2.GetClientManagersInfoMsg.FromString,
                    response_serializer=cluster__manager__pb2.ClientManagersInfoDTO.SerializeToString,
            ),
            'getTrafficManagersInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getTrafficManagersInfo,
                    request_deserializer=cluster__manager__pb2.GetTrafficManagersInfoMsg.FromString,
                    response_serializer=cluster__manager__pb2.TrafficManagersInfoDTO.SerializeToString,
            ),
            'stopAllRunningContainers': grpc.unary_unary_rpc_method_handler(
                    servicer.stopAllRunningContainers,
                    request_deserializer=cluster__manager__pb2.StopAllRunningContainersMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopContainer': grpc.unary_unary_rpc_method_handler(
                    servicer.stopContainer,
                    request_deserializer=cluster__manager__pb2.StopContainerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'removeAllStoppedContainers': grpc.unary_unary_rpc_method_handler(
                    servicer.removeAllStoppedContainers,
                    request_deserializer=cluster__manager__pb2.RemoveAllStoppedContainersMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'removeContainer': grpc.unary_unary_rpc_method_handler(
                    servicer.removeContainer,
                    request_deserializer=cluster__manager__pb2.RemoveContainerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'removeAllContainerImages': grpc.unary_unary_rpc_method_handler(
                    servicer.removeAllContainerImages,
                    request_deserializer=cluster__manager__pb2.RemoveAllContainerImagesMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'removeContainerImage': grpc.unary_unary_rpc_method_handler(
                    servicer.removeContainerImage,
                    request_deserializer=cluster__manager__pb2.RemoveContainerImageMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'listAllContainerImages': grpc.unary_unary_rpc_method_handler(
                    servicer.listAllContainerImages,
                    request_deserializer=cluster__manager__pb2.ListAllContainerImagesMsg.FromString,
                    response_serializer=cluster__manager__pb2.ContainerImagesDTO.SerializeToString,
            ),
            'listAllDockerNetworks': grpc.unary_unary_rpc_method_handler(
                    servicer.listAllDockerNetworks,
                    request_deserializer=cluster__manager__pb2.ListAllDockerNetworksMsg.FromString,
                    response_serializer=cluster__manager__pb2.DockerNetworksDTO.SerializeToString,
            ),
            'startAllStoppedContainers': grpc.unary_unary_rpc_method_handler(
                    servicer.startAllStoppedContainers,
                    request_deserializer=cluster__manager__pb2.StartAllStoppedContainersMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startContainer': grpc.unary_unary_rpc_method_handler(
                    servicer.startContainer,
                    request_deserializer=cluster__manager__pb2.StartContainerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'listAllRunningContainers': grpc.unary_unary_rpc_method_handler(
                    servicer.listAllRunningContainers,
                    request_deserializer=cluster__manager__pb2.ListAllRunningContainersMsg.FromString,
                    response_serializer=cluster__manager__pb2.RunningContainersDTO.SerializeToString,
            ),
            'listAllRunningEmulations': grpc.unary_unary_rpc_method_handler(
                    servicer.listAllRunningEmulations,
                    request_deserializer=cluster__manager__pb2.ListAllRunningEmulationsMsg.FromString,
                    response_serializer=cluster__manager__pb2.RunningEmulationsDTO.SerializeToString,
            ),
            'listAllStoppedContainers': grpc.unary_unary_rpc_method_handler(
                    servicer.listAllStoppedContainers,
                    request_deserializer=cluster__manager__pb2.ListAllStoppedContainersMsg.FromString,
                    response_serializer=cluster__manager__pb2.StoppedContainersDTO.SerializeToString,
            ),
            'createEmulationNetworks': grpc.unary_unary_rpc_method_handler(
                    servicer.createEmulationNetworks,
                    request_deserializer=cluster__manager__pb2.CreateEmulationNetworksMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopDockerStatsManagerThread': grpc.unary_unary_rpc_method_handler(
                    servicer.stopDockerStatsManagerThread,
                    request_deserializer=cluster__manager__pb2.StopDockerStatsManagerThreadMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'getDockerStatsManagerStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getDockerStatsManagerStatus,
                    request_deserializer=cluster__manager__pb2.GetDockerStatsManagerStatusMsg.FromString,
                    response_serializer=cluster__manager__pb2.DockerStatsMonitorStatusDTO.SerializeToString,
            ),
            'removeDockerNetworks': grpc.unary_unary_rpc_method_handler(
                    servicer.removeDockerNetworks,
                    request_deserializer=cluster__manager__pb2.RemoveDockerNetworksMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'removeAllDockerNetworks': grpc.unary_unary_rpc_method_handler(
                    servicer.removeAllDockerNetworks,
                    request_deserializer=cluster__manager__pb2.RemoveAllDockerNetworksMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'getDockerStatsManagersInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getDockerStatsManagersInfo,
                    request_deserializer=cluster__manager__pb2.GetDockerStatsManagersInfoMsg.FromString,
                    response_serializer=cluster__manager__pb2.DockerStatsManagersInfoDTO.SerializeToString,
            ),
            'startElkManager': grpc.unary_unary_rpc_method_handler(
                    servicer.startElkManager,
                    request_deserializer=cluster__manager__pb2.StartElkManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopElkManager': grpc.unary_unary_rpc_method_handler(
                    servicer.stopElkManager,
                    request_deserializer=cluster__manager__pb2.StopElkManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'getElkStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getElkStatus,
                    request_deserializer=cluster__manager__pb2.GetElkStackStatusMsg.FromString,
                    response_serializer=cluster__manager__pb2.ElkStatusDTO.SerializeToString,
            ),
            'stopElkStack': grpc.unary_unary_rpc_method_handler(
                    servicer.stopElkStack,
                    request_deserializer=cluster__manager__pb2.StopElkStackMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startElastic': grpc.unary_unary_rpc_method_handler(
                    servicer.startElastic,
                    request_deserializer=cluster__manager__pb2.StartElasticServiceMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopElastic': grpc.unary_unary_rpc_method_handler(
                    servicer.stopElastic,
                    request_deserializer=cluster__manager__pb2.StopElasticServiceMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startKibana': grpc.unary_unary_rpc_method_handler(
                    servicer.startKibana,
                    request_deserializer=cluster__manager__pb2.StartKibanaServiceMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopKibana': grpc.unary_unary_rpc_method_handler(
                    servicer.stopKibana,
                    request_deserializer=cluster__manager__pb2.StopKibanaServiceMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startLogstash': grpc.unary_unary_rpc_method_handler(
                    servicer.startLogstash,
                    request_deserializer=cluster__manager__pb2.StartLogstashServiceMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopLogstash': grpc.unary_unary_rpc_method_handler(
                    servicer.stopLogstash,
                    request_deserializer=cluster__manager__pb2.StopLogstashServiceMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'getElkManagersInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getElkManagersInfo,
                    request_deserializer=cluster__manager__pb2.GetElkManagersInfoMsg.FromString,
                    response_serializer=cluster__manager__pb2.ElkManagersInfoDTO.SerializeToString,
            ),
            'startContainersOfExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.startContainersOfExecution,
                    request_deserializer=cluster__manager__pb2.StartContainersOfExecutionMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'runContainer': grpc.unary_unary_rpc_method_handler(
                    servicer.runContainer,
                    request_deserializer=cluster__manager__pb2.RunContainerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopContainersOfExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.stopContainersOfExecution,
                    request_deserializer=cluster__manager__pb2.StopContainersOfExecutionMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startHostManager': grpc.unary_unary_rpc_method_handler(
                    servicer.startHostManager,
                    request_deserializer=cluster__manager__pb2.StartHostManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopHostManagers': grpc.unary_unary_rpc_method_handler(
                    servicer.stopHostManagers,
                    request_deserializer=cluster__manager__pb2.StopHostManagersMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopHostManager': grpc.unary_unary_rpc_method_handler(
                    servicer.stopHostManager,
                    request_deserializer=cluster__manager__pb2.StopHostManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopFilebeats': grpc.unary_unary_rpc_method_handler(
                    servicer.stopFilebeats,
                    request_deserializer=cluster__manager__pb2.StopFilebeatsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopPacketbeats': grpc.unary_unary_rpc_method_handler(
                    servicer.stopPacketbeats,
                    request_deserializer=cluster__manager__pb2.StopPacketbeatsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopMetricbeats': grpc.unary_unary_rpc_method_handler(
                    servicer.stopMetricbeats,
                    request_deserializer=cluster__manager__pb2.StopMetricbeatsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopHeartbeats': grpc.unary_unary_rpc_method_handler(
                    servicer.stopHeartbeats,
                    request_deserializer=cluster__manager__pb2.StopHeartbeatsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startHostMonitorThreads': grpc.unary_unary_rpc_method_handler(
                    servicer.startHostMonitorThreads,
                    request_deserializer=cluster__manager__pb2.StartHostMonitorThreadsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startHostMonitorThread': grpc.unary_unary_rpc_method_handler(
                    servicer.startHostMonitorThread,
                    request_deserializer=cluster__manager__pb2.StartHostMonitorThreadMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startFilebeat': grpc.unary_unary_rpc_method_handler(
                    servicer.startFilebeat,
                    request_deserializer=cluster__manager__pb2.StartFileBeatMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startPacketbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.startPacketbeat,
                    request_deserializer=cluster__manager__pb2.StartPacketBeatMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startMetricbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.startMetricbeat,
                    request_deserializer=cluster__manager__pb2.StartMetricBeatMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.startHeartbeat,
                    request_deserializer=cluster__manager__pb2.StartHeartBeatMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopFilebeat': grpc.unary_unary_rpc_method_handler(
                    servicer.stopFilebeat,
                    request_deserializer=cluster__manager__pb2.StopFileBeatMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopPacketbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.stopPacketbeat,
                    request_deserializer=cluster__manager__pb2.StopPacketBeatMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopMetricbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.stopMetricbeat,
                    request_deserializer=cluster__manager__pb2.StopMetricBeatMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.stopHeartbeat,
                    request_deserializer=cluster__manager__pb2.StopHeartBeatMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'applyFileBeatConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.applyFileBeatConfig,
                    request_deserializer=cluster__manager__pb2.ApplyFileBeatConfigMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'applyPacketBeatConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.applyPacketBeatConfig,
                    request_deserializer=cluster__manager__pb2.ApplyPacketBeatConfigMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'applyMetricBeatConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.applyMetricBeatConfig,
                    request_deserializer=cluster__manager__pb2.ApplyMetricBeatConfigMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'applyHeartBeatConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.applyHeartBeatConfig,
                    request_deserializer=cluster__manager__pb2.ApplyHeartBeatConfigMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'getHostMonitorThreadsStatuses': grpc.unary_unary_rpc_method_handler(
                    servicer.getHostMonitorThreadsStatuses,
                    request_deserializer=cluster__manager__pb2.GetHostMonitorThreadsStatusesMsg.FromString,
                    response_serializer=cluster__manager__pb2.HostManagerStatusesDTO.SerializeToString,
            ),
            'getHostManagersInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getHostManagersInfo,
                    request_deserializer=cluster__manager__pb2.GetHostManagersInfoMsg.FromString,
                    response_serializer=cluster__manager__pb2.HostManagersInfoDTO.SerializeToString,
            ),
            'stopKafkaManager': grpc.unary_unary_rpc_method_handler(
                    servicer.stopKafkaManager,
                    request_deserializer=cluster__manager__pb2.StopKafkaManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startKafkaManager': grpc.unary_unary_rpc_method_handler(
                    servicer.startKafkaManager,
                    request_deserializer=cluster__manager__pb2.StartKafkaManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'createKafkaTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.createKafkaTopics,
                    request_deserializer=cluster__manager__pb2.CreateKafkaTopicsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'getKafkaStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getKafkaStatus,
                    request_deserializer=cluster__manager__pb2.GetKafkaManagerStatusMsg.FromString,
                    response_serializer=cluster__manager__pb2.KafkaStatusDTO.SerializeToString,
            ),
            'stopKafkaServer': grpc.unary_unary_rpc_method_handler(
                    servicer.stopKafkaServer,
                    request_deserializer=cluster__manager__pb2.StopKafkaServerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startKafkaServer': grpc.unary_unary_rpc_method_handler(
                    servicer.startKafkaServer,
                    request_deserializer=cluster__manager__pb2.StopKafkaServerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'getKafkaManagersInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getKafkaManagersInfo,
                    request_deserializer=cluster__manager__pb2.GetKafkaManagersInfoMsg.FromString,
                    response_serializer=cluster__manager__pb2.KafkaManagersInfoDTO.SerializeToString,
            ),
            'stopOSSECIDSes': grpc.unary_unary_rpc_method_handler(
                    servicer.stopOSSECIDSes,
                    request_deserializer=cluster__manager__pb2.StopOSSECIDSesMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startOSSECIDSes': grpc.unary_unary_rpc_method_handler(
                    servicer.startOSSECIDSes,
                    request_deserializer=cluster__manager__pb2.StartOSSECIDSesMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopOSSECIDS': grpc.unary_unary_rpc_method_handler(
                    servicer.stopOSSECIDS,
                    request_deserializer=cluster__manager__pb2.StopOSSECIDSMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startOSSECIDS': grpc.unary_unary_rpc_method_handler(
                    servicer.startOSSECIDS,
                    request_deserializer=cluster__manager__pb2.StartOSSECIDSMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startOSSECIDSManagers': grpc.unary_unary_rpc_method_handler(
                    servicer.startOSSECIDSManagers,
                    request_deserializer=cluster__manager__pb2.StartOSSECIDSManagers.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopOSSECIDSManagers': grpc.unary_unary_rpc_method_handler(
                    servicer.stopOSSECIDSManagers,
                    request_deserializer=cluster__manager__pb2.StopOSSECIDSManagers.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startOSSECIDSManager': grpc.unary_unary_rpc_method_handler(
                    servicer.startOSSECIDSManager,
                    request_deserializer=cluster__manager__pb2.StartOSSECIDSManager.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopOSSECIDSManager': grpc.unary_unary_rpc_method_handler(
                    servicer.stopOSSECIDSManager,
                    request_deserializer=cluster__manager__pb2.StopOSSECIDSManager.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startOSSECIDSMonitorThread': grpc.unary_unary_rpc_method_handler(
                    servicer.startOSSECIDSMonitorThread,
                    request_deserializer=cluster__manager__pb2.StartOSSECIDSMonitorThreadMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopOSSECIDSMonitorThread': grpc.unary_unary_rpc_method_handler(
                    servicer.stopOSSECIDSMonitorThread,
                    request_deserializer=cluster__manager__pb2.StopOSSECIDSMonitorThreadMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopOSSECIDSMonitorThreads': grpc.unary_unary_rpc_method_handler(
                    servicer.stopOSSECIDSMonitorThreads,
                    request_deserializer=cluster__manager__pb2.StopOSSECIDSMonitorThreadsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'getOSSECIDSMonitorThreadStatuses': grpc.unary_unary_rpc_method_handler(
                    servicer.getOSSECIDSMonitorThreadStatuses,
                    request_deserializer=cluster__manager__pb2.GetOSSECIDSMonitorThreadStatusesMsg.FromString,
                    response_serializer=cluster__manager__pb2.OSSECIdsMonitorThreadStatusesDTO.SerializeToString,
            ),
            'getOSSECIdsManagersInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getOSSECIdsManagersInfo,
                    request_deserializer=cluster__manager__pb2.GetOSSECIDSManagersInfoMsg.FromString,
                    response_serializer=cluster__manager__pb2.OSSECIdsManagersInfoDTO.SerializeToString,
            ),
            'startRyuManager': grpc.unary_unary_rpc_method_handler(
                    servicer.startRyuManager,
                    request_deserializer=cluster__manager__pb2.StartRyuManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopRyuManager': grpc.unary_unary_rpc_method_handler(
                    servicer.stopRyuManager,
                    request_deserializer=cluster__manager__pb2.StopRyuManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'getRyuStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getRyuStatus,
                    request_deserializer=cluster__manager__pb2.GetRyuServiceStatusMsg.FromString,
                    response_serializer=cluster__manager__pb2.RyuManagerStatusDTO.SerializeToString,
            ),
            'startRyu': grpc.unary_unary_rpc_method_handler(
                    servicer.startRyu,
                    request_deserializer=cluster__manager__pb2.StartRyuServiceMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopRyu': grpc.unary_unary_rpc_method_handler(
                    servicer.stopRyu,
                    request_deserializer=cluster__manager__pb2.StopRyuServiceMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'getRyuManagersInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getRyuManagersInfo,
                    request_deserializer=cluster__manager__pb2.GetRyuManagersInfoMsg.FromString,
                    response_serializer=cluster__manager__pb2.RyuManagersInfoDTO.SerializeToString,
            ),
            'stopSnortIdses': grpc.unary_unary_rpc_method_handler(
                    servicer.stopSnortIdses,
                    request_deserializer=cluster__manager__pb2.StopSnortIdsesMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopSnortIdsesMonitorThreads': grpc.unary_unary_rpc_method_handler(
                    servicer.stopSnortIdsesMonitorThreads,
                    request_deserializer=cluster__manager__pb2.StopSnortIdsesMonitorThreadsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopSnortIds': grpc.unary_unary_rpc_method_handler(
                    servicer.stopSnortIds,
                    request_deserializer=cluster__manager__pb2.StopSnortMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopSnortIdsMonitorThread': grpc.unary_unary_rpc_method_handler(
                    servicer.stopSnortIdsMonitorThread,
                    request_deserializer=cluster__manager__pb2.StopSnortIdsMonitorThreadMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startSnortIds': grpc.unary_unary_rpc_method_handler(
                    servicer.startSnortIds,
                    request_deserializer=cluster__manager__pb2.StartSnortMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startSnortIdsMonitorThreads': grpc.unary_unary_rpc_method_handler(
                    servicer.startSnortIdsMonitorThreads,
                    request_deserializer=cluster__manager__pb2.StartSnortIdsMonitorThreadsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startSnortIdsMonitorThread': grpc.unary_unary_rpc_method_handler(
                    servicer.startSnortIdsMonitorThread,
                    request_deserializer=cluster__manager__pb2.StartSnortIdsMonitorThreadMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startSnortIdsManagers': grpc.unary_unary_rpc_method_handler(
                    servicer.startSnortIdsManagers,
                    request_deserializer=cluster__manager__pb2.StartSnortIdsManagersMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopSnortIdsManagers': grpc.unary_unary_rpc_method_handler(
                    servicer.stopSnortIdsManagers,
                    request_deserializer=cluster__manager__pb2.StopSnortIdsManagersMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startSnortIdsManager': grpc.unary_unary_rpc_method_handler(
                    servicer.startSnortIdsManager,
                    request_deserializer=cluster__manager__pb2.StartSnortIdsManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopSnortIdsManager': grpc.unary_unary_rpc_method_handler(
                    servicer.stopSnortIdsManager,
                    request_deserializer=cluster__manager__pb2.StopSnortIdsManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopSnortIdsMonitorThreads': grpc.unary_unary_rpc_method_handler(
                    servicer.stopSnortIdsMonitorThreads,
                    request_deserializer=cluster__manager__pb2.StopSnortIdsMonitorThreadsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'getSnortIdsMonitorThreadStatuses': grpc.unary_unary_rpc_method_handler(
                    servicer.getSnortIdsMonitorThreadStatuses,
                    request_deserializer=cluster__manager__pb2.GetSnortIdsMonitorThreadStatusesMsg.FromString,
                    response_serializer=cluster__manager__pb2.SnortIdsMonitorThreadStatusesDTO.SerializeToString,
            ),
            'getSnortIdsManagersInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getSnortIdsManagersInfo,
                    request_deserializer=cluster__manager__pb2.GetSnortIdsManagersInfoMsg.FromString,
                    response_serializer=cluster__manager__pb2.SnortIdsManagersInfoDTO.SerializeToString,
            ),
            'getExecutionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getExecutionInfo,
                    request_deserializer=cluster__manager__pb2.GetExecutionInfoMsg.FromString,
                    response_serializer=cluster__manager__pb2.ExecutionInfoDTO.SerializeToString,
            ),
            'listKibanaTunnels': grpc.unary_unary_rpc_method_handler(
                    servicer.listKibanaTunnels,
                    request_deserializer=cluster__manager__pb2.ListKibanaTunnelsMsg.FromString,
                    response_serializer=cluster__manager__pb2.KibanaTunnelsDTO.SerializeToString,
            ),
            'createKibanaTunnel': grpc.unary_unary_rpc_method_handler(
                    servicer.createKibanaTunnel,
                    request_deserializer=cluster__manager__pb2.CreateKibanaTunnelMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'listRyuTunnels': grpc.unary_unary_rpc_method_handler(
                    servicer.listRyuTunnels,
                    request_deserializer=cluster__manager__pb2.ListRyuTunnelsMsg.FromString,
                    response_serializer=cluster__manager__pb2.RyuTunnelsDTO.SerializeToString,
            ),
            'createRyuTunnel': grpc.unary_unary_rpc_method_handler(
                    servicer.createRyuTunnel,
                    request_deserializer=cluster__manager__pb2.CreateKibanaTunnelMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'removeKibanaTunnel': grpc.unary_unary_rpc_method_handler(
                    servicer.removeKibanaTunnel,
                    request_deserializer=cluster__manager__pb2.RemoveKibanaTunnelMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'removeRyuTunnel': grpc.unary_unary_rpc_method_handler(
                    servicer.removeRyuTunnel,
                    request_deserializer=cluster__manager__pb2.RemoveRyuTunnelMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopHostMonitorThreads': grpc.unary_unary_rpc_method_handler(
                    servicer.stopHostMonitorThreads,
                    request_deserializer=cluster__manager__pb2.StopHostMonitorThreadsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopHostMonitorThread': grpc.unary_unary_rpc_method_handler(
                    servicer.stopHostMonitorThread,
                    request_deserializer=cluster__manager__pb2.StopHostMonitorThreadMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startRyuMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.startRyuMonitor,
                    request_deserializer=cluster__manager__pb2.StartRyuMonitorThreadMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopRyuMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.stopRyuMonitor,
                    request_deserializer=cluster__manager__pb2.StopRyuMonitorThreadMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'getRyuControllerLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getRyuControllerLogs,
                    request_deserializer=cluster__manager__pb2.GetRyuControllerLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getRyuManagerLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getRyuManagerLogs,
                    request_deserializer=cluster__manager__pb2.GetRyuManagerLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getElkLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getElkLogs,
                    request_deserializer=cluster__manager__pb2.GetElkLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getElkManagerLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getElkManagerLogs,
                    request_deserializer=cluster__manager__pb2.GetElkManagerLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getTrafficManagerLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getTrafficManagerLogs,
                    request_deserializer=cluster__manager__pb2.GetTrafficManagerLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getHostManagerLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getHostManagerLogs,
                    request_deserializer=cluster__manager__pb2.GetHostManagerLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getOSSECIdsLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getOSSECIdsLogs,
                    request_deserializer=cluster__manager__pb2.GetOSSECIdsLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getOSSECIdsManagerLogsMsg': grpc.unary_unary_rpc_method_handler(
                    servicer.getOSSECIdsManagerLogsMsg,
                    request_deserializer=cluster__manager__pb2.GetOSSECIdsManagerLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getSnortIdsLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getSnortIdsLogs,
                    request_deserializer=cluster__manager__pb2.GetSnortIdsLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getSnortIdsManagerLogsMsg': grpc.unary_unary_rpc_method_handler(
                    servicer.getSnortIdsManagerLogsMsg,
                    request_deserializer=cluster__manager__pb2.GetSnortIdsManagerLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getKafkaLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getKafkaLogs,
                    request_deserializer=cluster__manager__pb2.GetKafkaLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getKafkaManagerLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getKafkaManagerLogs,
                    request_deserializer=cluster__manager__pb2.GetKafkaManagerLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getClientManagerLogsMsg': grpc.unary_unary_rpc_method_handler(
                    servicer.getClientManagerLogsMsg,
                    request_deserializer=cluster__manager__pb2.GetClientManagerLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getContainerLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getContainerLogs,
                    request_deserializer=cluster__manager__pb2.GetContainerLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getClusterManagerLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getClusterManagerLogs,
                    request_deserializer=cluster__manager__pb2.GetClusterManagerLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getExecutionTimeSeriesData': grpc.unary_unary_rpc_method_handler(
                    servicer.getExecutionTimeSeriesData,
                    request_deserializer=cluster__manager__pb2.GetExecutionTimeSeriesDataMsg.FromString,
                    response_serializer=cluster__manager__pb2.EmulationMetricsTimeSeriesDTO.SerializeToString,
            ),
            'startSparkServers': grpc.unary_unary_rpc_method_handler(
                    servicer.startSparkServers,
                    request_deserializer=cluster__manager__pb2.StartSparkServersMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopSparkServers': grpc.unary_unary_rpc_method_handler(
                    servicer.stopSparkServers,
                    request_deserializer=cluster__manager__pb2.StopSparkServersMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startSparkServer': grpc.unary_unary_rpc_method_handler(
                    servicer.startSparkServer,
                    request_deserializer=cluster__manager__pb2.StartSparkServerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopSparkServer': grpc.unary_unary_rpc_method_handler(
                    servicer.stopSparkServer,
                    request_deserializer=cluster__manager__pb2.StopSparkServerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'checkPid': grpc.unary_unary_rpc_method_handler(
                    servicer.checkPid,
                    request_deserializer=cluster__manager__pb2.CheckPidMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'stopPid': grpc.unary_unary_rpc_method_handler(
                    servicer.stopPid,
                    request_deserializer=cluster__manager__pb2.StopPidMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ClusterManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClusterManager(object):
    """Interface exported by the server
    """

    @staticmethod
    def getNodeStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getNodeStatus',
            cluster__manager__pb2.GetNodeStatusMsg.SerializeToString,
            cluster__manager__pb2.NodeStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startPostgreSQL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startPostgreSQL',
            cluster__manager__pb2.StartPostgreSQLMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startCAdvisor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startCAdvisor',
            cluster__manager__pb2.StartCAdvisorMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startNodeExporter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startNodeExporter',
            cluster__manager__pb2.StartNodeExporterMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startGrafana(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startGrafana',
            cluster__manager__pb2.StartGrafanaMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startPrometheus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startPrometheus',
            cluster__manager__pb2.StartPrometheusMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startPgAdmin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startPgAdmin',
            cluster__manager__pb2.StartPgAdminMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startNginx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startNginx',
            cluster__manager__pb2.StartNginxMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startFlask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startFlask',
            cluster__manager__pb2.StartFlaskMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startDockerStatsManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startDockerStatsManager',
            cluster__manager__pb2.StartDockerStatsManagerMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startDockerStatsManagerThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startDockerStatsManagerThread',
            cluster__manager__pb2.StartDockerStatsManagerThreadMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startDockerEngine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startDockerEngine',
            cluster__manager__pb2.StartDockerEngineMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopPostgreSQL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopPostgreSQL',
            cluster__manager__pb2.StopPostgreSQLMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopCAdvisor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopCAdvisor',
            cluster__manager__pb2.StopCAdvisorMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopNodeExporter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopNodeExporter',
            cluster__manager__pb2.StopNodeExporterMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopGrafana(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopGrafana',
            cluster__manager__pb2.StopGrafanaMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopPrometheus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopPrometheus',
            cluster__manager__pb2.StopPrometheusMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopPgAdmin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopPgAdmin',
            cluster__manager__pb2.StopPgAdminMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopNginx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopNginx',
            cluster__manager__pb2.StopNginxMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopFlask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopFlask',
            cluster__manager__pb2.StopFlaskMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopDockerStatsManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopDockerStatsManager',
            cluster__manager__pb2.StopDockerStatsManagerMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopDockerEngine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopDockerEngine',
            cluster__manager__pb2.StopDockerEngineMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCsleLogFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getCsleLogFiles',
            cluster__manager__pb2.GetCsleLogFilesMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDockerStatsManagerLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getDockerStatsManagerLogs',
            cluster__manager__pb2.GetDockerStatsManagerLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPrometheusLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getPrometheusLogs',
            cluster__manager__pb2.GetPrometheusLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getNodeExporterLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getNodeExporterLogs',
            cluster__manager__pb2.GetNodeExporterLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCadvisorLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getCadvisorLogs',
            cluster__manager__pb2.GetCAdvisorLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPgAdminLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getPgAdminLogs',
            cluster__manager__pb2.GetPgAdminLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getGrafanaLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getGrafanaLogs',
            cluster__manager__pb2.GetGrafanaLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getNginxLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getNginxLogs',
            cluster__manager__pb2.GetNginxLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDockerLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getDockerLogs',
            cluster__manager__pb2.GetDockerLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPostrgreSQLLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getPostrgreSQLLogs',
            cluster__manager__pb2.GetPostgreSQLLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getFlaskLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getFlaskLogs',
            cluster__manager__pb2.GetFlaskLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getLogFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getLogFile',
            cluster__manager__pb2.GetLogFileMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startContainersInExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startContainersInExecution',
            cluster__manager__pb2.StartContainersInExecutionMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def attachContainersInExecutionToNetworks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/attachContainersInExecutionToNetworks',
            cluster__manager__pb2.AttachContainersToNetworksInExecutionMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def installLibraries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/installLibraries',
            cluster__manager__pb2.InstallLibrariesMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def applyKafkaConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/applyKafkaConfig',
            cluster__manager__pb2.ApplyKafkaConfigMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSdnController(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startSdnController',
            cluster__manager__pb2.StartSdnControllerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def applyResourceConstraints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/applyResourceConstraints',
            cluster__manager__pb2.ApplyResouceConstraintsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createOvsSwitches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/createOvsSwitches',
            cluster__manager__pb2.CreateOvsSwitchesMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pingExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/pingExecution',
            cluster__manager__pb2.PingExecutionMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def configureOvs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/configureOvs',
            cluster__manager__pb2.ConfigureOvsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSdnControllerMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startSdnControllerMonitor',
            cluster__manager__pb2.StartSdnControllerMonitorMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/createUsers',
            cluster__manager__pb2.CreateUsersMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createVulnerabilities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/createVulnerabilities',
            cluster__manager__pb2.CreateVulnsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createFlags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/createFlags',
            cluster__manager__pb2.CreateFlagsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createTopology(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/createTopology',
            cluster__manager__pb2.CreateTopologyMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startTrafficManagers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startTrafficManagers',
            cluster__manager__pb2.StartTrafficManagersMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startTrafficGenerators(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startTrafficGenerators',
            cluster__manager__pb2.StartTrafficGeneratorsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startClientPopulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startClientPopulation',
            cluster__manager__pb2.StartClientPopulationMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startKafkaClientProducer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startKafkaClientProducer',
            cluster__manager__pb2.StartKafkaClientProducerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopKafkaClientProducer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopKafkaClientProducer',
            cluster__manager__pb2.StopKafkaClientProducerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSnortIdses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startSnortIdses',
            cluster__manager__pb2.StartSnortIdsesMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSnortIdsesMonitorThreads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startSnortIdsesMonitorThreads',
            cluster__manager__pb2.StartSnortIdsesMonitorThreadsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startOssecIdses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startOssecIdses',
            cluster__manager__pb2.StartOSSECIdsesMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startOssecIdsesMonitorThreads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startOssecIdsesMonitorThreads',
            cluster__manager__pb2.StartOSSECIdsesMonitorThreadsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startElkStack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startElkStack',
            cluster__manager__pb2.StartElkStackMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startHostManagers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startHostManagers',
            cluster__manager__pb2.StartHostManagersMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def applyFileBeatsConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/applyFileBeatsConfig',
            cluster__manager__pb2.ApplyFileBeatConfigsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def applyPacketBeatsConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/applyPacketBeatsConfig',
            cluster__manager__pb2.ApplyPacketBeatConfigsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def applyMetricBeatsConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/applyMetricBeatsConfig',
            cluster__manager__pb2.ApplyMetricBeatConfigsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def applyHeartBeatsConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/applyHeartBeatsConfig',
            cluster__manager__pb2.ApplyHeartBeatConfigsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startFilebeats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startFilebeats',
            cluster__manager__pb2.StartFileBeatsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startPacketbeats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startPacketbeats',
            cluster__manager__pb2.StartPacketBeatsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startMetricbeats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startMetricbeats',
            cluster__manager__pb2.StartMetricBeatsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startHeartbeats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startHeartbeats',
            cluster__manager__pb2.StartHeartBeatsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopAllExecutionsOfEmulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopAllExecutionsOfEmulation',
            cluster__manager__pb2.StopAllExecutionsOfEmulationMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopExecution',
            cluster__manager__pb2.StopExecutionMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopAllExecutions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopAllExecutions',
            cluster__manager__pb2.StopAllExecutionsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cleanAllExecutions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/cleanAllExecutions',
            cluster__manager__pb2.CleanAllExecutionsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cleanAllExecutionsOfEmulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/cleanAllExecutionsOfEmulation',
            cluster__manager__pb2.CleanAllExecutionsOfEmulationMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cleanExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/cleanExecution',
            cluster__manager__pb2.CleanExecutionMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startTrafficManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startTrafficManager',
            cluster__manager__pb2.StartTrafficManagerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopTrafficManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopTrafficManager',
            cluster__manager__pb2.StartTrafficManagerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopTrafficManagers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopTrafficManagers',
            cluster__manager__pb2.StartTrafficManagersMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startClientManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startClientManager',
            cluster__manager__pb2.StartClientManagerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopClientPopulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopClientPopulation',
            cluster__manager__pb2.StopClientPopulationMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopClientManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopClientManager',
            cluster__manager__pb2.StopClientManagerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getNumActiveClients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getNumActiveClients',
            cluster__manager__pb2.GetNumActiveClientsMsg.SerializeToString,
            cluster__manager__pb2.GetNumClientsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startTrafficGenerator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startTrafficGenerator',
            cluster__manager__pb2.StartTrafficGeneratorMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopTrafficGenerators(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopTrafficGenerators',
            cluster__manager__pb2.StopTrafficGeneratorsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopTrafficGenerator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopTrafficGenerator',
            cluster__manager__pb2.StopTrafficGeneratorMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getClientManagersInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getClientManagersInfo',
            cluster__manager__pb2.GetClientManagersInfoMsg.SerializeToString,
            cluster__manager__pb2.ClientManagersInfoDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTrafficManagersInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getTrafficManagersInfo',
            cluster__manager__pb2.GetTrafficManagersInfoMsg.SerializeToString,
            cluster__manager__pb2.TrafficManagersInfoDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopAllRunningContainers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopAllRunningContainers',
            cluster__manager__pb2.StopAllRunningContainersMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopContainer',
            cluster__manager__pb2.StopContainerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeAllStoppedContainers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/removeAllStoppedContainers',
            cluster__manager__pb2.RemoveAllStoppedContainersMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/removeContainer',
            cluster__manager__pb2.RemoveContainerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeAllContainerImages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/removeAllContainerImages',
            cluster__manager__pb2.RemoveAllContainerImagesMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeContainerImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/removeContainerImage',
            cluster__manager__pb2.RemoveContainerImageMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listAllContainerImages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/listAllContainerImages',
            cluster__manager__pb2.ListAllContainerImagesMsg.SerializeToString,
            cluster__manager__pb2.ContainerImagesDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listAllDockerNetworks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/listAllDockerNetworks',
            cluster__manager__pb2.ListAllDockerNetworksMsg.SerializeToString,
            cluster__manager__pb2.DockerNetworksDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startAllStoppedContainers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startAllStoppedContainers',
            cluster__manager__pb2.StartAllStoppedContainersMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startContainer',
            cluster__manager__pb2.StartContainerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listAllRunningContainers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/listAllRunningContainers',
            cluster__manager__pb2.ListAllRunningContainersMsg.SerializeToString,
            cluster__manager__pb2.RunningContainersDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listAllRunningEmulations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/listAllRunningEmulations',
            cluster__manager__pb2.ListAllRunningEmulationsMsg.SerializeToString,
            cluster__manager__pb2.RunningEmulationsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listAllStoppedContainers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/listAllStoppedContainers',
            cluster__manager__pb2.ListAllStoppedContainersMsg.SerializeToString,
            cluster__manager__pb2.StoppedContainersDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createEmulationNetworks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/createEmulationNetworks',
            cluster__manager__pb2.CreateEmulationNetworksMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopDockerStatsManagerThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopDockerStatsManagerThread',
            cluster__manager__pb2.StopDockerStatsManagerThreadMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDockerStatsManagerStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getDockerStatsManagerStatus',
            cluster__manager__pb2.GetDockerStatsManagerStatusMsg.SerializeToString,
            cluster__manager__pb2.DockerStatsMonitorStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeDockerNetworks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/removeDockerNetworks',
            cluster__manager__pb2.RemoveDockerNetworksMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeAllDockerNetworks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/removeAllDockerNetworks',
            cluster__manager__pb2.RemoveAllDockerNetworksMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDockerStatsManagersInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getDockerStatsManagersInfo',
            cluster__manager__pb2.GetDockerStatsManagersInfoMsg.SerializeToString,
            cluster__manager__pb2.DockerStatsManagersInfoDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startElkManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startElkManager',
            cluster__manager__pb2.StartElkManagerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopElkManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopElkManager',
            cluster__manager__pb2.StopElkManagerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getElkStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getElkStatus',
            cluster__manager__pb2.GetElkStackStatusMsg.SerializeToString,
            cluster__manager__pb2.ElkStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopElkStack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopElkStack',
            cluster__manager__pb2.StopElkStackMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startElastic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startElastic',
            cluster__manager__pb2.StartElasticServiceMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopElastic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopElastic',
            cluster__manager__pb2.StopElasticServiceMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startKibana(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startKibana',
            cluster__manager__pb2.StartKibanaServiceMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopKibana(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopKibana',
            cluster__manager__pb2.StopKibanaServiceMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startLogstash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startLogstash',
            cluster__manager__pb2.StartLogstashServiceMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopLogstash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopLogstash',
            cluster__manager__pb2.StopLogstashServiceMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getElkManagersInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getElkManagersInfo',
            cluster__manager__pb2.GetElkManagersInfoMsg.SerializeToString,
            cluster__manager__pb2.ElkManagersInfoDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startContainersOfExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startContainersOfExecution',
            cluster__manager__pb2.StartContainersOfExecutionMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def runContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/runContainer',
            cluster__manager__pb2.RunContainerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopContainersOfExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopContainersOfExecution',
            cluster__manager__pb2.StopContainersOfExecutionMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startHostManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startHostManager',
            cluster__manager__pb2.StartHostManagerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopHostManagers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopHostManagers',
            cluster__manager__pb2.StopHostManagersMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopHostManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopHostManager',
            cluster__manager__pb2.StopHostManagerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopFilebeats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopFilebeats',
            cluster__manager__pb2.StopFilebeatsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopPacketbeats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopPacketbeats',
            cluster__manager__pb2.StopPacketbeatsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopMetricbeats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopMetricbeats',
            cluster__manager__pb2.StopMetricbeatsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopHeartbeats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopHeartbeats',
            cluster__manager__pb2.StopHeartbeatsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startHostMonitorThreads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startHostMonitorThreads',
            cluster__manager__pb2.StartHostMonitorThreadsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startHostMonitorThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startHostMonitorThread',
            cluster__manager__pb2.StartHostMonitorThreadMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startFilebeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startFilebeat',
            cluster__manager__pb2.StartFileBeatMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startPacketbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startPacketbeat',
            cluster__manager__pb2.StartPacketBeatMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startMetricbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startMetricbeat',
            cluster__manager__pb2.StartMetricBeatMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startHeartbeat',
            cluster__manager__pb2.StartHeartBeatMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopFilebeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopFilebeat',
            cluster__manager__pb2.StopFileBeatMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopPacketbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopPacketbeat',
            cluster__manager__pb2.StopPacketBeatMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopMetricbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopMetricbeat',
            cluster__manager__pb2.StopMetricBeatMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopHeartbeat',
            cluster__manager__pb2.StopHeartBeatMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def applyFileBeatConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/applyFileBeatConfig',
            cluster__manager__pb2.ApplyFileBeatConfigMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def applyPacketBeatConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/applyPacketBeatConfig',
            cluster__manager__pb2.ApplyPacketBeatConfigMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def applyMetricBeatConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/applyMetricBeatConfig',
            cluster__manager__pb2.ApplyMetricBeatConfigMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def applyHeartBeatConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/applyHeartBeatConfig',
            cluster__manager__pb2.ApplyHeartBeatConfigMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getHostMonitorThreadsStatuses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getHostMonitorThreadsStatuses',
            cluster__manager__pb2.GetHostMonitorThreadsStatusesMsg.SerializeToString,
            cluster__manager__pb2.HostManagerStatusesDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getHostManagersInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getHostManagersInfo',
            cluster__manager__pb2.GetHostManagersInfoMsg.SerializeToString,
            cluster__manager__pb2.HostManagersInfoDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopKafkaManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopKafkaManager',
            cluster__manager__pb2.StopKafkaManagerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startKafkaManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startKafkaManager',
            cluster__manager__pb2.StartKafkaManagerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createKafkaTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/createKafkaTopics',
            cluster__manager__pb2.CreateKafkaTopicsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getKafkaStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getKafkaStatus',
            cluster__manager__pb2.GetKafkaManagerStatusMsg.SerializeToString,
            cluster__manager__pb2.KafkaStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopKafkaServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopKafkaServer',
            cluster__manager__pb2.StopKafkaServerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startKafkaServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startKafkaServer',
            cluster__manager__pb2.StopKafkaServerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getKafkaManagersInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getKafkaManagersInfo',
            cluster__manager__pb2.GetKafkaManagersInfoMsg.SerializeToString,
            cluster__manager__pb2.KafkaManagersInfoDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopOSSECIDSes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopOSSECIDSes',
            cluster__manager__pb2.StopOSSECIDSesMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startOSSECIDSes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startOSSECIDSes',
            cluster__manager__pb2.StartOSSECIDSesMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopOSSECIDS(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopOSSECIDS',
            cluster__manager__pb2.StopOSSECIDSMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startOSSECIDS(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startOSSECIDS',
            cluster__manager__pb2.StartOSSECIDSMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startOSSECIDSManagers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startOSSECIDSManagers',
            cluster__manager__pb2.StartOSSECIDSManagers.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopOSSECIDSManagers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopOSSECIDSManagers',
            cluster__manager__pb2.StopOSSECIDSManagers.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startOSSECIDSManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startOSSECIDSManager',
            cluster__manager__pb2.StartOSSECIDSManager.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopOSSECIDSManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopOSSECIDSManager',
            cluster__manager__pb2.StopOSSECIDSManager.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startOSSECIDSMonitorThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startOSSECIDSMonitorThread',
            cluster__manager__pb2.StartOSSECIDSMonitorThreadMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopOSSECIDSMonitorThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopOSSECIDSMonitorThread',
            cluster__manager__pb2.StopOSSECIDSMonitorThreadMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopOSSECIDSMonitorThreads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopOSSECIDSMonitorThreads',
            cluster__manager__pb2.StopOSSECIDSMonitorThreadsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getOSSECIDSMonitorThreadStatuses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getOSSECIDSMonitorThreadStatuses',
            cluster__manager__pb2.GetOSSECIDSMonitorThreadStatusesMsg.SerializeToString,
            cluster__manager__pb2.OSSECIdsMonitorThreadStatusesDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getOSSECIdsManagersInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getOSSECIdsManagersInfo',
            cluster__manager__pb2.GetOSSECIDSManagersInfoMsg.SerializeToString,
            cluster__manager__pb2.OSSECIdsManagersInfoDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startRyuManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startRyuManager',
            cluster__manager__pb2.StartRyuManagerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopRyuManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopRyuManager',
            cluster__manager__pb2.StopRyuManagerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getRyuStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getRyuStatus',
            cluster__manager__pb2.GetRyuServiceStatusMsg.SerializeToString,
            cluster__manager__pb2.RyuManagerStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startRyu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startRyu',
            cluster__manager__pb2.StartRyuServiceMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopRyu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopRyu',
            cluster__manager__pb2.StopRyuServiceMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getRyuManagersInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getRyuManagersInfo',
            cluster__manager__pb2.GetRyuManagersInfoMsg.SerializeToString,
            cluster__manager__pb2.RyuManagersInfoDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopSnortIdses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopSnortIdses',
            cluster__manager__pb2.StopSnortIdsesMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopSnortIdsesMonitorThreads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopSnortIdsesMonitorThreads',
            cluster__manager__pb2.StopSnortIdsesMonitorThreadsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopSnortIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopSnortIds',
            cluster__manager__pb2.StopSnortMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopSnortIdsMonitorThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopSnortIdsMonitorThread',
            cluster__manager__pb2.StopSnortIdsMonitorThreadMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSnortIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startSnortIds',
            cluster__manager__pb2.StartSnortMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSnortIdsMonitorThreads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startSnortIdsMonitorThreads',
            cluster__manager__pb2.StartSnortIdsMonitorThreadsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSnortIdsMonitorThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startSnortIdsMonitorThread',
            cluster__manager__pb2.StartSnortIdsMonitorThreadMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSnortIdsManagers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startSnortIdsManagers',
            cluster__manager__pb2.StartSnortIdsManagersMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopSnortIdsManagers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopSnortIdsManagers',
            cluster__manager__pb2.StopSnortIdsManagersMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSnortIdsManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startSnortIdsManager',
            cluster__manager__pb2.StartSnortIdsManagerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopSnortIdsManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopSnortIdsManager',
            cluster__manager__pb2.StopSnortIdsManagerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopSnortIdsMonitorThreads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopSnortIdsMonitorThreads',
            cluster__manager__pb2.StopSnortIdsMonitorThreadsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSnortIdsMonitorThreadStatuses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getSnortIdsMonitorThreadStatuses',
            cluster__manager__pb2.GetSnortIdsMonitorThreadStatusesMsg.SerializeToString,
            cluster__manager__pb2.SnortIdsMonitorThreadStatusesDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSnortIdsManagersInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getSnortIdsManagersInfo',
            cluster__manager__pb2.GetSnortIdsManagersInfoMsg.SerializeToString,
            cluster__manager__pb2.SnortIdsManagersInfoDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getExecutionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getExecutionInfo',
            cluster__manager__pb2.GetExecutionInfoMsg.SerializeToString,
            cluster__manager__pb2.ExecutionInfoDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listKibanaTunnels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/listKibanaTunnels',
            cluster__manager__pb2.ListKibanaTunnelsMsg.SerializeToString,
            cluster__manager__pb2.KibanaTunnelsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createKibanaTunnel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/createKibanaTunnel',
            cluster__manager__pb2.CreateKibanaTunnelMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listRyuTunnels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/listRyuTunnels',
            cluster__manager__pb2.ListRyuTunnelsMsg.SerializeToString,
            cluster__manager__pb2.RyuTunnelsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createRyuTunnel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/createRyuTunnel',
            cluster__manager__pb2.CreateKibanaTunnelMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeKibanaTunnel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/removeKibanaTunnel',
            cluster__manager__pb2.RemoveKibanaTunnelMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeRyuTunnel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/removeRyuTunnel',
            cluster__manager__pb2.RemoveRyuTunnelMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopHostMonitorThreads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopHostMonitorThreads',
            cluster__manager__pb2.StopHostMonitorThreadsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopHostMonitorThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopHostMonitorThread',
            cluster__manager__pb2.StopHostMonitorThreadMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startRyuMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startRyuMonitor',
            cluster__manager__pb2.StartRyuMonitorThreadMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopRyuMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopRyuMonitor',
            cluster__manager__pb2.StopRyuMonitorThreadMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getRyuControllerLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getRyuControllerLogs',
            cluster__manager__pb2.GetRyuControllerLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getRyuManagerLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getRyuManagerLogs',
            cluster__manager__pb2.GetRyuManagerLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getElkLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getElkLogs',
            cluster__manager__pb2.GetElkLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getElkManagerLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getElkManagerLogs',
            cluster__manager__pb2.GetElkManagerLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTrafficManagerLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getTrafficManagerLogs',
            cluster__manager__pb2.GetTrafficManagerLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getHostManagerLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getHostManagerLogs',
            cluster__manager__pb2.GetHostManagerLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getOSSECIdsLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getOSSECIdsLogs',
            cluster__manager__pb2.GetOSSECIdsLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getOSSECIdsManagerLogsMsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getOSSECIdsManagerLogsMsg',
            cluster__manager__pb2.GetOSSECIdsManagerLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSnortIdsLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getSnortIdsLogs',
            cluster__manager__pb2.GetSnortIdsLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSnortIdsManagerLogsMsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getSnortIdsManagerLogsMsg',
            cluster__manager__pb2.GetSnortIdsManagerLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getKafkaLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getKafkaLogs',
            cluster__manager__pb2.GetKafkaLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getKafkaManagerLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getKafkaManagerLogs',
            cluster__manager__pb2.GetKafkaManagerLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getClientManagerLogsMsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getClientManagerLogsMsg',
            cluster__manager__pb2.GetClientManagerLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getContainerLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getContainerLogs',
            cluster__manager__pb2.GetContainerLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getClusterManagerLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getClusterManagerLogs',
            cluster__manager__pb2.GetClusterManagerLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getExecutionTimeSeriesData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getExecutionTimeSeriesData',
            cluster__manager__pb2.GetExecutionTimeSeriesDataMsg.SerializeToString,
            cluster__manager__pb2.EmulationMetricsTimeSeriesDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSparkServers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startSparkServers',
            cluster__manager__pb2.StartSparkServersMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopSparkServers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopSparkServers',
            cluster__manager__pb2.StopSparkServersMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSparkServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startSparkServer',
            cluster__manager__pb2.StartSparkServerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopSparkServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopSparkServer',
            cluster__manager__pb2.StopSparkServerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkPid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/checkPid',
            cluster__manager__pb2.CheckPidMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopPid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopPid',
            cluster__manager__pb2.StopPidMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
